<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
	<title></title>
	<link href="https://hugodaniel.com/atom.xml" rel="self" type="application/atom+xml"/>
  <link href="https://hugodaniel.com"/>
	<generator uri="https://www.getzola.org/">Zola</generator>
	<updated>2020-12-04T00:00:00+00:00</updated>
	<id>https://hugodaniel.com/atom.xml</id>
	<entry xml:lang="en">
		<title>From Grid Generator to Shape The Pixel</title>
		<published>2020-12-04T00:00:00+00:00</published>
		<updated>2020-12-04T00:00:00+00:00</updated>
		<link href="https://hugodaniel.com/posts/from-gridgenerator-to-shape-the-pixel/" type="text/html"/>
		<id>https://hugodaniel.com/posts/from-gridgenerator-to-shape-the-pixel/</id>
		<content type="html">&lt;p&gt;More than two years ago I was releasing my bootstrapped drawing application into the world, the &amp;quot;Grid Generator&amp;quot; web app. It was the labor of love and the search for a creative project where I could eventually dedicate a big part of my future life. However, a trip to the Web Summit in 2017 and countless books of lean&#x2F;market-first approaches were not enough to save it from its fate. It was not a product or service that the market wanted. This did not surprised me, but yet it still consumed a lot of my energy and was a point stronger than my personal project vision for the most part. &lt;&#x2F;p&gt;
&lt;p&gt;Circumstances have taken me to a path where I can work on the drawing app again. Now I am going to give it a twist and turn it into something different. Just for fun.&lt;&#x2F;p&gt;
&lt;p&gt;The main idea will be the same: a geometric drawing tool. The objective and approach however will be very different. This time the driver points for the app development are going to be:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Making something just for fun&lt;&#x2F;li&gt;
&lt;li&gt;No client, no customer, no target audience&lt;&#x2F;li&gt;
&lt;li&gt;Assume nobody will use it, make it just for the pleasure of making it&lt;&#x2F;li&gt;
&lt;li&gt;No pricing or market analysis - the purpose is to be fun&lt;&#x2F;li&gt;
&lt;li&gt;Has to be cool&lt;&#x2F;li&gt;
&lt;li&gt;Focus on a creative approach to a common problem&lt;&#x2F;li&gt;
&lt;li&gt;Do it for the love of the craft&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;To top it the development is going to be done around a &lt;em&gt;mascot character&lt;&#x2F;em&gt;. This character will ultimately fulfill the role of an assistant (like Clippy but with personality). The app development and story are going to happen through it.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;meet-cliddy&quot;&gt;Meet Cliddy&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;em&gt;Cliddy is a simple &lt;a href=&quot;&#x2F;scripts&#x2F;modules&#x2F;cliddy.mjs&quot;&gt;Web Component&lt;&#x2F;a&gt; made with:&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cliddy-mascot &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;face&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;touched-face&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:D&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;div style=&quot;width: 100%; display: flex; justify-content: center;&quot;&gt;
&lt;cliddy-mascot face=&quot;:)&quot; touched-face=&quot;:D&quot;&gt;&lt;&#x2F;cliddy-mascot&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;It is time to Shape The Pixel.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>From Rust to Svelte, what tech stack will I use</title>
		<published>2020-06-07T00:00:00+00:00</published>
		<updated>2020-06-07T00:00:00+00:00</updated>
		<link href="https://hugodaniel.com/posts/browser-tech-stack-2020/" type="text/html"/>
		<id>https://hugodaniel.com/posts/browser-tech-stack-2020/</id>
		<content type="html">&lt;p&gt;&lt;strong&gt;TL;DR&lt;&#x2F;strong&gt; Here is a template for your new web app project: &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;HugoDaniel&#x2F;svelte-template&quot;&gt;Svelte + TypeScript + Parcel + Rust&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The web is a big open platform that keeps evolving with the URL at its core.&lt;&#x2F;p&gt;
&lt;p&gt;We have a lot of tech and frameworks at our disposal to chose when starting a new web app in 2020.&lt;&#x2F;p&gt;
&lt;p&gt;There certainly is a lot of mud to crawl into, from an all-in vanilla JS approach up until an all-out React with a 100+ dependencies approach.&lt;&#x2F;p&gt;
&lt;p&gt;Among these there are a few cool things that strike my attention:&lt;&#x2F;p&gt;
&lt;h2 id=&quot;svelte&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;svelte.dev&quot;&gt;Svelte&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Their component approach and state handling is fresh.&lt;&#x2F;p&gt;
&lt;p&gt;They lean towards using standards like CSS Variables and JS imports in an HTML first compiled approach.&lt;&#x2F;p&gt;
&lt;p&gt;The Svelte compiler outputs very lean JS code. Which comes in stark contrast with the current frontend bundle trends.&lt;&#x2F;p&gt;
&lt;p&gt;Perhaps in the future browsers will provide us higher-level components that can pack together HTML+JS+CSS in a way that is at least as elegant as Svelte does.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;parcel&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;parceljs.org&quot;&gt;Parcel&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Most bundlers configuration is typically write-once and write-only. It is a pain to maintain and properly configure a bundle.&lt;&#x2F;p&gt;
&lt;p&gt;Parcel does it right by providing sane defaults that don&#x27;t need configuration upfront. (A bit like the &lt;a href=&quot;https:&#x2F;&#x2F;fishshell.com&#x2F;docs&#x2F;current&#x2F;design.html&quot;&gt;fish shell&lt;&#x2F;a&gt; )&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Why is a bundler needed if Svelte already has a compiler ?&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;A bundler like Parcel provides the extra goodies of allowing us to import strange files directly in our &lt;code&gt;.svelte&lt;&#x2F;code&gt; components.&lt;&#x2F;p&gt;
&lt;p&gt;Stuff like TypeScript and even Rust become a breeze to work with.&lt;&#x2F;p&gt;
&lt;p&gt;Perhaps in the future bundlers won&#x27;t be needed. Perhaps even text files won&#x27;t be needed to code. Unfortunately we need them in our current state of things.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;typescript&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.typescriptlang.org&quot;&gt;TypeScript&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;This language has been evolving fast. For now types are the way to go and TypeScript does a great job at typifying JavaScript and preventing those nasty null errors where you least expect(ed) them.&lt;&#x2F;p&gt;
&lt;p&gt;Perhaps in the future startups will again push towards dynamic languages as a way to bring faster products to market and the &amp;quot;Move fast, break things&amp;quot; will make sense again. But for now static is the way to go.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;rust&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.rust-lang.org&quot;&gt;Rust&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Rust has a lot of good things. It appeals the front-end crowd as much as the backend people and the language is leveraging those windows of opportunity much better than any other language or community.&lt;&#x2F;p&gt;
&lt;p&gt;Wasm bindgen is a bliss of fresh air, it even works very well with TypeScript.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;webassembly&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;webassembly.org&quot;&gt;WebAssembly&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;This is a total game changer for the next years. As a compile target it will allow near native performance and open the door for a lot of programming languages to be used on the web.&lt;&#x2F;p&gt;
&lt;p&gt;A new era of web apps is coming thanks to Web Assembly. It is hard to forsee what exactly will this be.&lt;&#x2F;p&gt;
&lt;p&gt;There are nevertheless a few cool extensions already being worked on for it:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;WebAssembly&#x2F;WASI&quot;&gt;WASI&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;WebAssembly&#x2F;simd&quot;&gt;128-bit SIMD&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;WebAssembly&#x2F;threads&quot;&gt;Threads&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;WebAssembly&#x2F;reference-types&quot;&gt;Ref. Types&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;WebAssembly&#x2F;multi-value&quot;&gt;Multiple value returns and block parameters&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;webassembly&#x2F;bulk-memory-operations&quot;&gt;Bulk Memory Operations&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;WebAssembly&#x2F;nontrapping-float-to-int-conversions&quot;&gt;Non-trapping float-to-int convertions&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;WebAssembly&#x2F;sign-extension-ops&quot;&gt;Sign-extension ops&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;WebAssembly&#x2F;exception-handling&quot;&gt;Exception handling&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;WebAssembly&#x2F;extended-name-section&quot;&gt;Extended name section&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;WebAssembly&#x2F;multi-memory&quot;&gt;Multi-memory&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;WebAssembly&#x2F;gc&quot;&gt;Garbage Collection&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Web development is going to be a very different beast in a few moments in time. Lets enjoy the ride.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;I have fetched some ideas from a few repos and forked them into a ready to use template you can start your projects with.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;HugoDaniel&#x2F;svelte-template&quot;&gt;Check it out.&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Keeping track of memory allocations in JS</title>
		<published>2018-07-06T00:00:00+00:00</published>
		<updated>2018-07-06T00:00:00+00:00</updated>
		<link href="https://hugodaniel.com/drafts/keeping-track-of-memory-allocations-in-js/" type="text/html"/>
		<id>https://hugodaniel.com/drafts/keeping-track-of-memory-allocations-in-js/</id>
		<content type="html">&lt;p&gt;Memory is cheap. It is not uncommon for smartphones to carry 2GB or more to play around.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;interact-to-allocate-new-memory&quot;&gt;Interact to allocate new memory&lt;&#x2F;h2&gt;
&lt;h2 id=&quot;animate-memory-allocations&quot;&gt;Animate memory allocations&lt;&#x2F;h2&gt;
&lt;h2 id=&quot;&quot;&gt;&lt;&#x2F;h2&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Introducing Grid Generator Version 0</title>
		<published>2018-07-05T00:00:00+00:00</published>
		<updated>2018-07-05T00:00:00+00:00</updated>
		<link href="https://hugodaniel.com/posts/grid-generator-v0/" type="text/html"/>
		<id>https://hugodaniel.com/posts/grid-generator-v0/</id>
		<content type="html">&lt;p&gt;The purpose of this post is to introduce my personal project: Grid Generator. This is the first post about it since it went online on the 1st of July 2018.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-problem-does-it-solve&quot;&gt;What problem does it solve?&lt;&#x2F;h2&gt;
&lt;p&gt;I have always struggled with design tools. In particular those that came to see the light of the day during the 90&#x27;s (Adobe I am looking at you).&lt;&#x2F;p&gt;
&lt;p&gt;These design tools are clearly targeted at &amp;quot;pros&amp;quot; and &amp;quot;specialists&amp;quot; (like most of the computer &amp;quot;stuff&amp;quot; from&#x2F;during the 90&#x27;s). You are not expected to be able to work with them if you are not a specialist or if you did not take at least a course on these tools.&lt;&#x2F;p&gt;
&lt;p&gt;Being trained in software development made me look at the works produced by designers with wonder and amazement. I want to be able to at least produce geometric clean shapes that fit well together.&lt;&#x2F;p&gt;
&lt;p&gt;Unfortunately making even simple shapes in the current design software offer is a daunting task for me.&lt;&#x2F;p&gt;
&lt;p&gt;That was my motivation behind Grid Generator: Create simple shapes, easily pick colors, and paint them in a grid, making patterns or more complex shapes.&lt;&#x2F;p&gt;
&lt;p&gt;I also wanted to bring time into play. Time is an important factor to consider and to work with in Grid Generator.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-to-expect&quot;&gt;What to expect?&lt;&#x2F;h2&gt;
&lt;p&gt;A square grid. In this version, and in the upcoming near versions, Grid Generator only supports a base square grid.&lt;&#x2F;p&gt;
&lt;p&gt;Think of it as pixel art with configurable pixels. Where your moves are being recorded.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;grid1.png&quot; alt=&quot;Simple house with squares, triangles, and a rounded square&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;grid2.png&quot; alt=&quot;The same with the grid hidden&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;shape-editor&quot;&gt;Shape editor&lt;&#x2F;h3&gt;
&lt;p&gt;In a square grid the base shape is the square. If you click on the &#x27;+&#x27; button bellow left, it opens the &amp;quot;Shape Editor&amp;quot;. Here you are presented with a grid made of lines and circles. This is where you customize your square. The intersections are automatically calculated to help you create your shapes. You as an artist&#x2F;designer only need to connect the dots and build your shape.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;shape_editor.png&quot; alt=&quot;Just connect the dots&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;You can pile many shapes on top of each other and change their colors.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;shape_editor_pile.png&quot; alt=&quot;Several sub-shapes on the same shape&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Time is an important aspect, you can go back to any previous state of your shapes and re-edit them from there.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;shape_editor_travel.png&quot; alt=&quot;Several sub-shapes on the same shape&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;After your shape is created you can start painting with it.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;shape_editor_paint.png&quot; alt=&quot;Paint your new shape on the main grid&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Or create other color variations of it on the &#x27;+&#x27; button to the right.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;shape_editor_colors.png&quot; alt=&quot;Create several color variations for your shape&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;tile-patterns&quot;&gt;Tile Patterns&lt;&#x2F;h3&gt;
&lt;p&gt;I have asked in reddit about software to create tile patterns. A few answers came up but none quite filled my taste. I used this as a motivation to implement automatic tile patterns in Grid Generator.&lt;&#x2F;p&gt;
&lt;p&gt;In the menu just click on the &amp;quot;pattern&amp;quot; icon, and then on the &amp;quot;grid&amp;quot;. A blue frame shows up where you can paint inside and everything gets repeated outside.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;grid_pattern.png&quot; alt=&quot;The pattern frame&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;You can drag the corners of the blue frame to adjust your pattern to your drawing and create different patterns with white spaces.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;grid_pattern_tri.png&quot; alt=&quot;A triangular pattern&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;replay-your-art&quot;&gt;Replay your art&lt;&#x2F;h3&gt;
&lt;p&gt;After having created something cool you can publish it to share with your friends. Publishing an artwork makes it publicly available in its own page.&lt;&#x2F;p&gt;
&lt;p&gt;In there you will see a big &amp;quot;play&amp;quot; button that will replay your creative process until the final state is reached.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;gridgenerator.com&#x2F;p&#x2F;13&quot;&gt;Check it out.&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;remix-it&quot;&gt;Remix it&lt;&#x2F;h3&gt;
&lt;p&gt;You can pick any state of the art being replayed and remix your own version from there on. You can easily create your variations by clicking on the remix button (&amp;quot;Change It&amp;quot; on the bottom).&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;remix_grid.png&quot; alt=&quot;Remix other works and create variations&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;export&quot;&gt;Export&lt;&#x2F;h3&gt;
&lt;p&gt;Exporting is currently the only paid feature of Grid Generator. My logic to make this a paid feature was that you can support the further development of this app if you are producing anything of value with it.&lt;&#x2F;p&gt;
&lt;p&gt;In the future I am planning to make this a free feature by adding other sources of revenue like instant product creations with your art (bags, t-shirts, etc...) and even selling packs of specially crafted grids.&lt;&#x2F;p&gt;
&lt;p&gt;After paying you can export your work as SVG. SVG is a vector format that is very prone to rounding errors and aliasing, so I also implemented exporting your works as high-res PNG&#x27;s that solve these issues.&lt;&#x2F;p&gt;
&lt;p&gt;Another possibility you have is to export your creative process as GIF or MP4, saving you the hard work of screen recording and editing.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;upcoming-features&quot;&gt;Upcoming features&lt;&#x2F;h2&gt;
&lt;p&gt;The next version (v1) will mostly see UI&#x2F;UX improvements (imo those are critically needed) and some small features with these, like:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Possibility to clear your shapes in the shape editor&lt;&#x2F;li&gt;
&lt;li&gt;Rough onboarding&lt;&#x2F;li&gt;
&lt;li&gt;Slightly better menus and pages&lt;&#x2F;li&gt;
&lt;li&gt;Facebook login&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;After these I am planning some major stuff like:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Stroke support in shapes&lt;&#x2F;li&gt;
&lt;li&gt;Background images in shapes&lt;&#x2F;li&gt;
&lt;li&gt;Layers&lt;&#x2F;li&gt;
&lt;li&gt;Color picker enhancements&lt;&#x2F;li&gt;
&lt;li&gt;Triangular grids and shapes&lt;&#x2F;li&gt;
&lt;li&gt;Custom base grid editor (create any kind of base grid)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Try it and if you feel inspired tell me which features you would like to see most.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;gridgenerator.com&quot;&gt;https:&#x2F;&#x2F;gridgenerator.com&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;In its current state Grid Generator is very raw. I did a lot of compromises to get here but the idea is very close to its initial inception in my head from a couple of years ago. Along the way I had the help and feedback of amazing people. I have some upcoming posts planned on them. They helped a lot of this feel way less lonely and in some points I think they believed more in it than me :)&lt;&#x2F;p&gt;
&lt;p&gt;Alas &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;HugoDaniel&#x2F;gridgenerator&quot;&gt;everything is open source&lt;&#x2F;a&gt; and I am going to start using GitHub bells and whistles in its further development.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Eviction and Debt</title>
		<published>2018-07-04T00:00:00+00:00</published>
		<updated>2018-07-04T00:00:00+00:00</updated>
		<link href="https://hugodaniel.com/posts/eviction-and-debt/" type="text/html"/>
		<id>https://hugodaniel.com/posts/eviction-and-debt/</id>
		<content type="html">&lt;p&gt;The last 6 months?&lt;&#x2F;p&gt;
&lt;p&gt;Rents rising, IRS, grants and the version 0 of my personal project&lt;&#x2F;p&gt;
&lt;h2 id=&quot;a-lisbon-story-part-i-eviction&quot;&gt;A Lisbon Story (part I - eviction)&lt;&#x2F;h2&gt;
&lt;p&gt;Renting cycles have always happened. In certain cities you can even map whole migrations as they trend and landlords surf the wave of higher rent prices for at least the same level of preocupations.&lt;&#x2F;p&gt;
&lt;p&gt;Roughly 18 years ago I moved to Lisbon to study. For me it represented moving away from my village into the unknown. More than going to a big school where I did not know anyone. It was the city that drove my fears and desire to explore and know more. To wander and find new neighborhoods with different cultures and habits than mine.&lt;&#x2F;p&gt;
&lt;p&gt;Nowadays these neighborhoods still exist, but their inhabitants have mostly been evicted and moved to the outskirts. We branded this as &amp;quot;gentrification&amp;quot;. Gentlemen move to the place where you were previously living (notice that you are excluded from the gentlemen group by definition).&lt;&#x2F;p&gt;
&lt;p&gt;In Lisbon this did not happen softly. Most of my friends are now evicted. The red flags are everywhere.&lt;&#x2F;p&gt;
&lt;p&gt;My landlord sent me an SMS the other day. He said he wanted to speak to me about some important matters. I cannot think of anything good coming from a conversation with a landlord. He evicted me. Why charge &#x27;n&#x27; to normal people when you can charge gentlemen &#x27;n&#x27;*4? No problem, time for a change anyway.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;a-lisbon-story-part-ii-debt&quot;&gt;A Lisbon Story (part II - debt)&lt;&#x2F;h2&gt;
&lt;p&gt;The city has been a major part of my lifestyle for the last 18 years. I managed to reduce my cost of living to under €700&#x2F;month and still save a little. This was in no small part due to my rent. It might seem crazy but some neighbors of mine even manage to spend less through heroic frugal tactics.&lt;&#x2F;p&gt;
&lt;p&gt;With this I decided to collect my savings from the bank and dedicate full-time to develop a painting application that could help me and eventually others to do shapes and patterns like the ones from tiles.&lt;&#x2F;p&gt;
&lt;p&gt;Grid Generator has been a central part of my life since then.&lt;&#x2F;p&gt;
&lt;p&gt;Somewhere on my journey I managed to get a grant to work on it. With the obligation to build a company shortly after it finished. It has ended in May.&lt;&#x2F;p&gt;
&lt;p&gt;In an unrelated event to the eviction I got contacted by the IRS roughly on the same week that I got evicted. Because I was using my savings before I am old and&#x2F;or dying from a terminal disease it seems that I now have to pay them a cumulative 10% of some amount for each year that I saved.&lt;&#x2F;p&gt;
&lt;p&gt;After some calculations the IRS lady told me that the total I needed to pay them was more money than I had in my account. Fuck. I mean: FUCK. It is said that in Portugal you can owe money to a lot of people. Rich people. Banks. Mafia. Drug dealers. But you simply cannot owe money to the IRS. Ever. Dark stories are told about people who once owed them money.&lt;&#x2F;p&gt;
&lt;p&gt;&amp;quot;Fortunately&amp;quot; the Portuguese IRS shady tactics are so common that they allow you to pay in small parts and through some other weird mechanics that delay your entry into their shitlist.&lt;&#x2F;p&gt;
&lt;p&gt;The words of a friend that is into cryptocurrencies echoed in my mind: &lt;em&gt;&amp;quot;The current economic system was not made to help you save money&amp;quot;&lt;&#x2F;em&gt;. How I wish he was wrong.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;forward-momentum&quot;&gt;Forward momentum&lt;&#x2F;h2&gt;
&lt;p&gt;Grid Generator has been my testbed for a lot of strange experimentations and ideas. Not only in the approach to solve the problems it intends (shape editor, color picker, etc...) but specially in the code.&lt;&#x2F;p&gt;
&lt;p&gt;I have rewritten it completely from scratch some 4 times with varying degrees of (in)success. In its current state it is done with typescript and infernojs. While in its previous incarnations used react, vanilla js, immutable js and even did a quick stroll through purescript. It currently runs on top of DragonflyBSD.&lt;&#x2F;p&gt;
&lt;p&gt;The project is online and ready to use at &lt;a href=&quot;https:&#x2F;&#x2F;gridgenerator.com&quot;&gt;https:&#x2F;&#x2F;gridgenerator.com&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;I call it &amp;quot;version 0&amp;quot; as it lacks a lot of features (like onboarding) and has all that coder design&#x2F;UX that you hate.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;To sum it up, I now have four major problems to solve:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Get money to pay the debt&lt;&#x2F;li&gt;
&lt;li&gt;Get a house to live&lt;&#x2F;li&gt;
&lt;li&gt;Build a company (with what money?)&lt;&#x2F;li&gt;
&lt;li&gt;Continue improving Grid Generator and start talking about it&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;I am shifting some of the energy away from Grid Generator to focus it on the first two of these problems and see how it goes.&lt;&#x2F;p&gt;
&lt;p&gt;I am also going to invest into propaganda now and try to walk the thin line of project promotion and SPAM.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;PATTERN.png&quot; alt=&quot;A Pattern made with Grid Generator&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>WebSummit opening night. Sharing the stage with Paddy Cosgrave</title>
		<published>2017-11-06T00:00:00+00:00</published>
		<updated>2017-11-06T00:00:00+00:00</updated>
		<link href="https://hugodaniel.com/posts/websummit-opening-night/" type="text/html"/>
		<id>https://hugodaniel.com/posts/websummit-opening-night/</id>
		<content type="html">&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;abertura02.jpg&quot; alt=&quot;Paddy Cosgrave taking a selfie on the Center Stage during the opening night&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;WebSummit first day came with a mix of up and downs sprinkled with the duality of having the desire to scream with euphoria versus admiting that the event is nothing special to avoid stressing about it.&lt;&#x2F;p&gt;
&lt;p&gt;This week I was contacted by their team to go up on the main stage with some of the startups that were present in last week event with the President Marcelo Rebelo de Sousa. That gave me cold sweats even though I knew it was nothing special. The idea was just to go on stage when they called for us and be there representing our startup scene.&lt;&#x2F;p&gt;
&lt;p&gt;Early in the morning, I went to the venue with high hopes of doing my registration and never think about WebSummit until the main stage opening night thing. Unfortunately they told me that registration would only happen after 12h, which made me go back home to spend the rest of the day printing and cutting flyers and cards to hopefully distribute to people at the event.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;abertura05.jpg&quot; alt=&quot;Entrepreneurs in the opening night, on the left I didn&#x27;t get the contact, on the right is Dinara Rakhimbaeva of ExpoChat&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Later at night, I had the meeting point with the WebSummit team nearby the pavillion where the opening night was going to happen. They routed all of us through a tunnel that gave access to the spectators area of the pavillion. From the speakers that attended I really enjoyed Margrethe Vestager, the european comissioner for competition, she spoke about markets and taxes to tech companies. I also liked a lot of the speech that António Guterres gave, the former prime-minister of Portugal and now secretary-general of the United Nations who spoke about the biggest difficulty of our generation: climate change.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;abertura04.jpg&quot; alt=&quot;António Costa waiting to press the button&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The cerimony was closed with the current prime-minister of Portugal, António Costa, and the mayor of Lisbon, Fernando Medina, who both pressed in a button that made a lot of confettis cannons explode. Before that they invited the portuguese startups the stage, where I was included. I used the chance to take a few pictures and wave at Guterres and Margrethe when by chance they looked at me.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;abertura03.jpg&quot; alt=&quot;WebSummit starting&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Grid Generator First Stand</title>
		<published>2017-11-03T00:00:00+00:00</published>
		<updated>2017-11-03T00:00:00+00:00</updated>
		<link href="https://hugodaniel.com/posts/gridgenerator-first-stand/" type="text/html"/>
		<id>https://hugodaniel.com/posts/gridgenerator-first-stand/</id>
		<content type="html">&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;beato1.jpg&quot; alt=&quot;Beato Creative Hub&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;About a month ago I was planning my WebSummit approach when I realized that I had never been to such an event. Much less have a stand of my project there.&lt;&#x2F;p&gt;
&lt;p&gt;That was when I started searching for opportunities to be at events. To train and prepare for the WebSummit.&lt;&#x2F;p&gt;
&lt;p&gt;Back then I got an invitation to participate in the first aniversary of StartUp Portugal, the portuguese state entity that acts upon the development of our entrepreneurial ecosystem.&lt;&#x2F;p&gt;
&lt;p&gt;My immediate decision was to say &amp;quot;yes&amp;quot; and use this oportunity to train the speach&#x2F;pitch&#x2F;posture in a faire stand.
The event took place in the &lt;a href=&quot;http:&#x2F;&#x2F;www.startuplisboa.com&#x2F;hcb&quot;&gt;&amp;quot;beato creative hub&amp;quot;&lt;&#x2F;a&gt;, an old military industrial area that was abandoned for years until they decided to turn it into the next big thing in Lisbon.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;beato2.jpg&quot; alt=&quot;The bag reads &amp;quot;Military Maintenance&amp;quot;, as this was an old factory related to the portuguese military&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Access wise it is near the river, and although it has a nearby bike path, the entrance is on the inner side, making it difficult to get there on bike or on foot (cars tend to speed and the sidewalks are narrow in that area of the city). The surrounding neighborhood used to be neglected and poor, but now it is thriving with Lisboners looking for different places to hangout due to the tourist pressure present in past common areas of the city (bairro alto, cais do sodré, etc...).&lt;&#x2F;p&gt;
&lt;p&gt;That day (4th of October) I arrived a bit earlier than expected to setup my stand and after it I drank a beer to chill out while making my first contacts with the other stands as they arrived.&lt;&#x2F;p&gt;
&lt;p&gt;The whole thing was novelty to me, I was there with &lt;a href=&quot;https:&#x2F;&#x2F;gridgenerator.com&quot;&gt;Grid Generator&lt;&#x2F;a&gt;, the bootstrapped project I&#x27;ve been working on, and things proceeded in three waves during the day:&lt;&#x2F;p&gt;
&lt;h2 id=&quot;wave-1-lots-of-people-in-suits&quot;&gt;Wave 1: Lots of people in suits&lt;&#x2F;h2&gt;
&lt;p&gt;After a while lots of people in suits showed up. Most of these were just walking around while keeping a safe distance from the stands. Enough not to get approached by any of us there standing.
Since I was there to take the most of it, I grabed a few flyers and actively went to them to talk about my amazing project.&lt;&#x2F;p&gt;
&lt;p&gt;To my shock they were not interested in listening to what I had to say. This was not even a problem with my pitch because they turned me down right after I showed up with a smile and said &amp;quot;Hello, can I talk to you about my project ?&amp;quot;. Maybe it is a problem with my face.&lt;&#x2F;p&gt;
&lt;p&gt;If they were not there for the startups and the people working on them then what were they there for ?&lt;&#x2F;p&gt;
&lt;p&gt;I decided to deal with it and move along. I guess negative reactions should be expected when going to these events with an active posture (seeking people to speak, instead of waiting for them to speak with you).&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;me_beato.jpg&quot; alt=&quot;Me in my stand&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;wave-2-nobody&quot;&gt;Wave 2: Nobody&lt;&#x2F;h2&gt;
&lt;p&gt;The event then had some talks. Unfortunately they were scheduled to happen in a different building than the one we were in. So suddenly everybody left and disappeared from sight. A few important politicians showed up to talk (I saw them at a glimpse) and we were left alone: should I leave my stand unattended ? I decided to stay and hold my ground just in case somebody showed up.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;talks_beato.jpg&quot; alt=&quot;Talks happening in another pavillion&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;During this time my motivation was going down and approaching a local minimum for that day. &lt;em&gt;&amp;quot;I see... this is mostly a political event.&amp;quot;&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;That was when I met Pedro from &lt;a href=&quot;http:&#x2F;&#x2F;othersigns.pt&#x2F;&quot;&gt;othersigns.pt&lt;&#x2F;a&gt;. He had decided to check out the projects while we were mostly empty. I pitched him when he interrupted and decided to criticise me about my pitch approach:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;&amp;quot;Why are you talking about your project like it is targeted for the design industry ? I can clearly see it is not, yet you talk about it like it is&amp;quot;&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;We talked. One hour later he had convinced me to look at it from a different angle and try to push the real innovative things about my project and sell it as a design tool for non-designers. Something targeted for the creative crowd that needs to do some design but don&#x27;t know&#x2F;want to work with complex pro tools like the ones professional designers use.&lt;&#x2F;p&gt;
&lt;p&gt;Lots of different possibilities and approaches for &lt;a href=&quot;https:&#x2F;&#x2F;gridgenerator.com&quot;&gt;Grid Generator&lt;&#x2F;a&gt; came into conversation. It was fun and made the event worthwhile.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;wave-3-some-important-people&quot;&gt;Wave 3: Some important people&lt;&#x2F;h2&gt;
&lt;p&gt;After the talks ended in the other pavillion a hoard of scouts in suits approached our stands and told the people next to me, in an important tone, that they would have to speak with the secretary of state for the industry.
It happenened. She talked to them, took some photos, and promptly decided to ignore most of us in the other stands, talking only to a select few. The other politicians didn&#x27;t bother to show up.&lt;&#x2F;p&gt;
&lt;p&gt;Startups were apparently the boring part in this startup event. &lt;a href=&quot;https:&#x2F;&#x2F;hugodaniel.com&#x2F;posts&#x2F;meeting-the-president&#x2F;&quot;&gt;Marcelo Rebelo de Sousa, yesterday,&lt;&#x2F;a&gt; was kind enough to give voice to anyone who wanted to speak.&lt;&#x2F;p&gt;
&lt;p&gt;After this I went out. Grabbed a slice of the aniversary cake that they were eating outside (even the cake was outside the stands area), and had another beer while meditating on what had happened. After this I left to dance &lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=9DYElqcREXc&quot;&gt;Kizomba&lt;&#x2F;a&gt; in another part of the city.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;I decided to participate in this event in order to train for our WebSummit stand. Overall it was a fun experience albeit the first of its kind I had. I am not sure I would want to repeat it again if given the chance.&lt;&#x2F;p&gt;
&lt;p&gt;It definetely helped me learn a few things about being in a stand and craft a more prepared approach for the bigger event that is the WebSummit.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;aniv1.jpg&quot; alt=&quot;Me at the first aniversay of StarUp Portugal, shortly after the event ended&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Here is a quick list of things this helped me learn about being in a stand, some of these are pretty obvious but still worth to keep in mind:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Take an active approach (approach and talk to people). I talked to more people than any of the other stands there.&lt;&#x2F;li&gt;
&lt;li&gt;Don&#x27;t grudge if people don&#x27;t want to talk to you (it is normal)&lt;&#x2F;li&gt;
&lt;li&gt;Your product demo is not the most important part. People will not get to it if your pitch is not convincing.&lt;&#x2F;li&gt;
&lt;li&gt;Don&#x27;t focus on pitching features. Pitch a story instead. It grabs attention better.&lt;&#x2F;li&gt;
&lt;li&gt;Keep a log of e-mails and reach them a few days later (ask people for their e-mails and not the other way around: don&#x27;t give your e-mail expecting to be contacted: you won&#x27;t be).&lt;&#x2F;li&gt;
&lt;li&gt;Eye-candy is important, the stands with the better visual looks got most of the attention.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Hope this helps and see you at the WebSummit next week &lt;a href=&quot;https:&#x2F;&#x2F;hugodaniel.com&#x2F;posts&#x2F;lisbon-as-an-inspiration-for-my-project&#x2F;&quot;&gt;in Lisbon&lt;&#x2F;a&gt;, also take a look at some cool &lt;a href=&quot;https:&#x2F;&#x2F;hugodaniel.com&#x2F;posts&#x2F;where-do-local-hackers-eat-in-lisbon&#x2F;&quot;&gt;places to eat in the touristic area of Lisbon&lt;&#x2F;a&gt; :)&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Meeting the President</title>
		<published>2017-11-02T00:00:00+00:00</published>
		<updated>2017-11-02T00:00:00+00:00</updated>
		<link href="https://hugodaniel.com/posts/meeting-the-president/" type="text/html"/>
		<id>https://hugodaniel.com/posts/meeting-the-president/</id>
		<content type="html">&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;inside_coches2.jpg&quot; alt=&quot;He talked to us in the old coach museum&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;A few days ago I got an e-mail from the presidency inviting me to go to an event with the president of Portugal, Marcelo Rebelo de Sousa. This came within the WebSummit context, he wanted to be personally with some of the portuguese startups that are going to attend the WebSummit next week.&lt;&#x2F;p&gt;
&lt;p&gt;This event would take place in the old National Coach Museum in the near future: today.&lt;&#x2F;p&gt;
&lt;p&gt;I guess that I got it because of my participation on the &amp;quot;Road2WebSummit&amp;quot; series of events that I was selected to be part of. Road2WebSummit is focused in coaching (pun intended) startups so they can be well prepared for the WebSummit. It tries to fill the gap of our lack of an official &amp;quot;entrepreneur&amp;quot; culture, although we do have a lot of background at being unofficially entrepreneurs as it comes attached to being a poor country in a rich continent. Now we just need to know how to capitalize on that and channel it through proper &amp;quot;startupian&amp;quot; gymnastics.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;coches.jpg&quot; alt=&quot;The entrance&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The invitation added that the dresscode was a &amp;quot;dark suit&amp;quot;. That was a problem for me since I don&#x27;t have any suits and did not intend to buy or loan one. I decided to dress somewhat nicely with what I had around without leaning too much towards informality.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;suits.jpg&quot; alt=&quot;Suits everywhere&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Almost everyone suited-up for the event, which let me feeling a bit out of place initially, but that all went away once inside.&lt;&#x2F;p&gt;
&lt;p&gt;The museum is amazing! I had never been there and kind of regret it since they moved to the new &amp;quot;modern&amp;quot; place next door and closed this one (now labeled the &amp;quot;old&amp;quot; one).&lt;&#x2F;p&gt;
&lt;p&gt;There was still some old coaches around and the ceiling decoration is still beautiful as people always told me it was. At the end they placed chairs for everyone to sit for the speech.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;inside_coches.jpg&quot; alt=&quot;The entrance&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The president arrived after a few minutes. He talked for a small bit, introduced the economy minister and the websummit people. He is known for his improvisation skills and for the hability to charismatically make quick decisions. After all the personalities had spoken he then passed the word to the startups. Whoever wanted to speak could introduce themselves and their company&#x2F;ideia to everyone else.&lt;&#x2F;p&gt;
&lt;p&gt;Here is the video of his speech (he translates from portuguese to english as he goes).&lt;&#x2F;p&gt;
&lt;video src=&quot;http:&#x2F;&#x2F;media.presidencia.pt&#x2F;videos&#x2F;mrs2017&#x2F;PRMRS_171102_V01_FHD.mp4&quot; width=&quot;100%&quot; controls &#x2F;&gt;
&lt;p&gt;About 90 people talked. That was the number they said, personally I did not count and unfortunately after a while my brain was not able to process any more &amp;quot;ideas&amp;quot; or startup names. I was spilling buzzwords through my ears. I think the winner buzzwords were &amp;quot;AI&amp;quot;, &amp;quot;Machine Learning&amp;quot;, &amp;quot;Disruptive&amp;quot;, &amp;quot;App&amp;quot;, &amp;quot;Intelligent&amp;quot;, &amp;quot;Deep learning&amp;quot;, &amp;quot;3D Printer&amp;quot; and some others I can&#x27;t recall.&lt;&#x2F;p&gt;
&lt;p&gt;Near the end we took a group picture, and before everyone left they gave some drinks and &lt;em&gt;pasteis de belém&lt;&#x2F;em&gt; while Marcelo was being invaded by people taking selfies with him.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;marcelo2.png&quot; alt=&quot;Me, the guy with no suit near the camers, with a blue circle. Marcelo, the president, at front with a red circle&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Overall it was a fun event I even met an ex-teacher from my university that is now trying to work out an idea to increase bike usage in Lisbon.&lt;&#x2F;p&gt;
&lt;p&gt;I hope another opportunity like this happens soon, maybe then I can also take a selfie with the Prez. :D&lt;&#x2F;p&gt;
&lt;p&gt;Meanwhile checkout how &lt;a href=&quot;https:&#x2F;&#x2F;hugodaniel.com&#x2F;posts&#x2F;first-funding-as-a-bootstrapper-in-portugal&#x2F;&quot;&gt;I got to participate&lt;&#x2F;a&gt; in the StartUp Portugal events. If you are here for the WebSummit don&#x27;t be fooled and &lt;a href=&quot;https:&#x2F;&#x2F;hugodaniel.com&#x2F;posts&#x2F;where-do-local-hackers-eat-in-lisbon&#x2F;&quot;&gt;read my recommendations for places to eat&lt;&#x2F;a&gt; in the touristic area.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Where do local hackers eat in Lisbon</title>
		<published>2017-11-01T00:00:00+00:00</published>
		<updated>2017-11-01T00:00:00+00:00</updated>
		<link href="https://hugodaniel.com/posts/where-do-local-hackers-eat-in-lisbon/" type="text/html"/>
		<id>https://hugodaniel.com/posts/where-do-local-hackers-eat-in-lisbon/</id>
		<content type="html">&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;kid.jpg&quot; alt=&quot;Picture of a kid in the dark looking for a friend to pass the ball while playing football&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;I don&#x27;t know where hackers (as in infosec wizards) eat in Lisbon. We do have a strong background of using things beyond their intended purpose (we call it &amp;quot;desenrascanço&amp;quot; and it is a basic trait of being born in the culture that has sprung here for centuries).&lt;&#x2F;p&gt;
&lt;p&gt;As is this post is intended for tourists looking for a typical experience.&lt;&#x2F;p&gt;
&lt;p&gt;If you are visiting Lisbon chances are that you will spend your time around the most touristic areas of the city. In this post I want to share with you some places and dishes that we love and are generally ignored by tourists. I don&#x27;t pretend to be Anthony Bourdain or any of those youtubers that don&#x27;t respect what they are eating and only go to fancy restaurants to say in the end that it is cheap and good.
Don&#x27;t fall for that. Be a proper tourist and avoid the &amp;quot;Torre de Belem snowball&amp;quot; at all costs. I have only seen snow 2 times in my life and it was not in Lisbon :D&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;belem_snowball.jpg&quot; alt=&quot;Snowing in Lisbon?&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;In Portugal we always seat to have lunch and dinner. We don&#x27;t eat walking. Traditionally everyone takes at least an hour to have lunch. It is kind of a big deal. People here are very proud of their food. There are many categories of places to eat but locals range them between &amp;quot;fancy restaurant&amp;quot; and &amp;quot;fast-food joint&amp;quot;. Somewhere between these two lies our honorable &lt;em&gt;&amp;quot;tasca&amp;quot;&lt;&#x2F;em&gt; (tavern &amp;lt;= &lt;em&gt;tasca&lt;&#x2F;em&gt; &amp;lt;= simple restaurant). A glorified tavern with a very peculiar set of skills, namely: very good and inexpensive local food.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-to-expect&quot;&gt;What to expect&lt;&#x2F;h2&gt;
&lt;p&gt;In a &lt;em&gt;tasca&lt;&#x2F;em&gt; you can expect at least the following:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;No cameras looking over you, the balcony or the employers * Never trust a business that tracks you and&#x2F;or doesn&#x27;t trust their own people&lt;&#x2F;li&gt;
&lt;li&gt;Open kitchen * Take a peek through the open window inside the kitchen and say hi to the cook&lt;&#x2F;li&gt;
&lt;li&gt;Freshly peeled hand-cut fried potatos * For your pleasure&lt;&#x2F;li&gt;
&lt;li&gt;Pressured wine * We split wine into two major groups: white&#x2F;red and then inside this group mature&#x2F;green (or is it the other way around?). Try them all! :)&lt;&#x2F;li&gt;
&lt;li&gt;A balcony if you are just warming your stomach * Yes, we sometimes eat standing at the balcony if it is something really fast&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;in-the-heart-of-lisbon&quot;&gt;In the heart of Lisbon&lt;&#x2F;h2&gt;
&lt;p&gt;Here are 4 &lt;em&gt;tascas&lt;&#x2F;em&gt; that I can think from the top of my head and which I recommend in the touristic area of the city. Don&#x27;t expect to see &amp;quot;hackers&amp;quot; as in computer wizards in them but typical portuguese folks eating. Chose the one near you when you get hungry.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.google.pt&#x2F;maps&#x2F;place&#x2F;Casa+Das+Bifanas&#x2F;@38.7141819,-9.1400812,17z&#x2F;data=!3m1!4b1!4m5!3m4!1s0xd1933877a14a101:0x58658df29b0791b0!8m2!3d38.7141769!4d-9.1378849&quot;&gt;&amp;quot;Casa das Bifanas&amp;quot; in Rossio&lt;&#x2F;a&gt; - &lt;img src=&quot;&#x2F;images&#x2F;bifanas.jpg&quot; alt=&quot;Formely known as &amp;quot;The king of Bifanas&amp;quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.google.pt&#x2F;maps&#x2F;place&#x2F;Popular+Do+Capelo&#x2F;@38.7098328,-9.1408684,20z&#x2F;data=!4m12!1m6!3m5!1s0xd1933877a14a101:0x58658df29b0791b0!2sCasa+Das+Bifanas!8m2!3d38.7141769!4d-9.1378849!3m4!1s0xd19347ecf1cf809:0xb3685b3298796599!8m2!3d38.7097915!4d-9.1406129&quot;&gt;&amp;quot;Popular do Capelo&amp;quot; in Chiado&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.google.pt&#x2F;maps&#x2F;place&#x2F;O+Trevo&#x2F;@38.7116017,-9.1461413,17z&#x2F;data=!4m5!3m4!1s0xd19347fa8fe09bd:0xd6fe73efee2fb6fc!8m2!3d38.710865!4d-9.1430943&quot;&gt;&amp;quot;O Trevo&amp;quot; in Pc. Camoes&lt;&#x2F;a&gt; - &lt;img src=&quot;&#x2F;images&#x2F;otrevo1.jpg&quot; alt=&quot;O trevo&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.google.pt&#x2F;maps&#x2F;place&#x2F;A+Parreirinha+Do+Rato&#x2F;@38.719569,-9.154936,19z&#x2F;data=!4m12!1m6!3m5!1s0xd19347fa8fe09bd:0xd6fe73efee2fb6fc!2sO+Trevo!8m2!3d38.710865!4d-9.1430943!3m4!1s0xd19337b1c2560f7:0x10c06dc141131fd5!8m2!3d38.7196609!4d-9.1548474&quot;&gt;&amp;quot;A Parreirinha do Rato&amp;quot; in Rato&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;things-to-keep-in-mind&quot;&gt;Things to keep in mind&lt;&#x2F;h3&gt;
&lt;p&gt;The main reason you step inside a &lt;em&gt;tasca&lt;&#x2F;em&gt; is the food. The second main reason is also the food. The list of reasons is long and every item of the list is food.
At the end of the list, down in the footer in a small font are lots of little details that you happen to notice when you are a regular client. These details are infinite and a new one pops out every time you step inside a &lt;em&gt;tasca&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;During lunch hour these are very busy places. The waiters are typically running and rushing while being seriously professional. They are in a no-bullshit mode, they know you want to eat and they know you will love the food.&lt;&#x2F;p&gt;
&lt;p&gt;The kitchen can close outside of eating hours and only small meals are served.&lt;&#x2F;p&gt;
&lt;p&gt;They are somewhat noisy and you can expect to see people screaming if there is a football match going on.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;what-to-eat&quot;&gt;What to eat&lt;&#x2F;h3&gt;
&lt;p&gt;Dishes are more or less the same in most &lt;em&gt;tascas&lt;&#x2F;em&gt;. Try these.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Starter&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Croquete (meat roll)&lt;&#x2F;li&gt;
&lt;li&gt;Chamuça (triangle with curry chicken)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;Soup&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Caldo Verde (kale soup)&lt;&#x2F;li&gt;
&lt;li&gt;Sopa de legumes (vegetables soup)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;Fish&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Polvo à lagareiro (octopus with olive oil)&lt;&#x2F;li&gt;
&lt;li&gt;Peixe espada (swordfish)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;Meat&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Secretos de porco (pork)&lt;&#x2F;li&gt;
&lt;li&gt;Bife à casa (steak)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;Drink&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Beer&lt;&#x2F;li&gt;
&lt;li&gt;Jar of wine (ask for the pressured white wine if you want the full experience)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;Dessert&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Arroz doce (sweet rice)&lt;&#x2F;li&gt;
&lt;li&gt;Café (ask for an extra &lt;em&gt;bagaço&lt;&#x2F;em&gt; if you want the full experience) * &lt;img src=&quot;&#x2F;images&#x2F;bagaco.jpg&quot; alt=&quot;Café and bagaço&quot; &#x2F;&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;If you just want a snack or something other than a full-meal, then try out our &amp;quot;Bifana&amp;quot;. A steak sandwich. Goes well with beer.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;intro-to-portuguese-pastery&quot;&gt;Intro to Portuguese pastery&lt;&#x2F;h2&gt;
&lt;p&gt;Our pastery is a bit different from the european cakes (because we never saw ourselves as a part of europe until +-40 years ago).
We have mostly french influences and also things from all over the world but to keep it short you can generally find fresh original cakes mostly made with sweet egg yolk. We put egg yolk in most of our cake recipes. I have heard several explanations for this, the most convincing one for me is that in convents nuns used the egg light to iron and starch the church clothes, then to avoid wasting the yolk they invented all of these different cakes that you can see in most cafes.&lt;&#x2F;p&gt;
&lt;p&gt;Our pastery shifts radically in some seasons, we have a whole range of cakes and snacks that are only done in christmas and some in easter.&lt;&#x2F;p&gt;
&lt;p&gt;You can find some brazillian pastery, which are heavy in condensed milk (sugar + milk cooked under pressure) and some variations of these with our traditional egg yolk. Just try whatever pops your eye :)&lt;&#x2F;p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;Explore Lisbon, it has many secrets and hidden gems. Our ways might seem a bit strange, clumsy and hard to get into at first, but peeking through the sweet spots can reveal a humble, seasoned and balanced culture (with earned scars of fighting hard against slavery, discrimination, inequality and dictatorship&#x2F;power surges). If you are here next week for the WebSummit lets hang out and have a drink :) &lt;a href=&quot;https:&#x2F;&#x2F;hugodaniel.com&#x2F;posts&#x2F;about&#x2F;&quot;&gt;Here is my contact at the bottom&lt;&#x2F;a&gt;. Take a look at why I think &lt;a href=&quot;https:&#x2F;&#x2F;hugodaniel.com&#x2F;posts&#x2F;lisbon-as-an-inspiration-for-my-project&#x2F;&quot;&gt;Lisbon is an inspiration&lt;&#x2F;a&gt; for my project.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>My first funding as a bootstrapper in Portugal</title>
		<published>2017-10-31T00:00:00+00:00</published>
		<updated>2017-10-31T00:00:00+00:00</updated>
		<link href="https://hugodaniel.com/posts/first-funding-as-a-bootstrapper-in-portugal/" type="text/html"/>
		<id>https://hugodaniel.com/posts/first-funding-as-a-bootstrapper-in-portugal/</id>
		<content type="html">&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;startupvoucher.jpg&quot; alt=&quot;StartUp Voucher ad, it reads: &amp;quot;What if your idea could turn into a company ?&amp;quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;In April 2016 I quit from the startup I was working to finally do a personal project. Back then the questions everyone asked me were mostly about money &lt;em&gt;&amp;quot;How are you going to live ?&amp;quot;&lt;&#x2F;em&gt;.
Even though rent prices in Lisbon have been skyrocketing due to tourism increase and the coming of WebSummit I always had a frugal economical lifestyle. I don&#x27;t have loans, I don&#x27;t have &amp;quot;luxuries&amp;quot; and I can keep my monthly spendings to what some people view as an heroically low value.
Looking back it was somewhat natural that when a set of conditions met I thought: &amp;quot;it&#x27;s now or never&amp;quot;.&lt;&#x2F;p&gt;
&lt;p&gt;I spent some months wondering about what kind of project to do. I knew I wanted something ambitious but I got easily lost in the objectives and purpose of the project. With time I realized that the money I had saved was not going to allow me to survive long enough to do a first version of the product and release it in the market.
That made me start looking around for investment, preferably some that did not imply selling part of the company (lost fund). That was when I found about StartUp Voucher.&lt;&#x2F;p&gt;
&lt;p&gt;Very briefly, StartUp Voucher is a community fund from the European Union that is run by the Portuguese Gov. with the purpose of helping out companies in &amp;quot;idea stage&amp;quot;. Pragmatically this means I get 690EUR&#x2F;month for 12 months plus the help of an incubator and a mentor.&lt;&#x2F;p&gt;
&lt;p&gt;This funding is particularly targeted for ideas outside of the most developed areas of the country. In spite of currently living in Lisbon I was born and raised in Alenquer, where my family still resides. To apply for this fund I made the headquarters of my project there, a place I love and visit on a weekly basis.&lt;&#x2F;p&gt;
&lt;p&gt;To further enhance my application I read through the whole 100 page &lt;a href=&quot;https:&#x2F;&#x2F;www.portugal2020.pt&#x2F;Portal2020&#x2F;Media&#x2F;Default&#x2F;Docs&#x2F;EstrategiasEInteligente&#x2F;EREI%20Centro.pdf&quot;&gt;&amp;quot;Research and Innovation Strategies for Smart Specialisation&amp;quot; report (RIS3)&lt;&#x2F;a&gt; for my region. That report made me notice that a software tool for grid based drawings could have a lot of impact in several practical applications for the exporting industries in the Center of Portugal. Like ceramics, textiles and creative industries.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;gridgenerator.com&quot;&gt;&lt;img src=&quot;https:&#x2F;&#x2F;gridgenerator.com&#x2F;img&#x2F;logo&#x2F;grid_generator_logo.png&quot; alt=&quot;The logo&quot; &#x2F;&gt;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;When Lisbon was boiling with WebSummit 2016 I was working full-time to apply to this fund. It took me a few weeks and in December I finally finished the application and sent it. After a some months I got the news that my project was one of the 245 chosen to be on the StartUp Voucher. Since around May 2017 that I have been getting 690EUR each month and working in full force on this project.&lt;&#x2F;p&gt;
&lt;p&gt;During this time I have been using their support to fine-tune the project in many ways and prepare myself for the first steps on the market. WebSummit is also being promoted by the StartUp Voucher who encourages all tech startups to try to attend.&lt;&#x2F;p&gt;
&lt;p&gt;Right now I have a working demo that have been using with some friends and potential users and I am planning to start looking for partnerships in early 2018.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;hugodaniel.com&#x2F;posts&#x2F;why-i-decided-to-go-to-the-websummit&#x2F;&quot;&gt;In this link&lt;&#x2F;a&gt; I explain why I decided to go to the WebSummit this year.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>How useful is the JavaScript Set</title>
		<published>2017-10-25T00:00:00+00:00</published>
		<updated>2017-10-25T00:00:00+00:00</updated>
		<link href="https://hugodaniel.com/posts/how-useful-is-the-javascript-set/" type="text/html"/>
		<id>https://hugodaniel.com/posts/how-useful-is-the-javascript-set/</id>
		<content type="html">&lt;p&gt;In most languages Set&#x27;s have a clear strong use case: fast union, intersection and difference operations; unfortunately in JavaScript these operations are not readily defined so as an exercise I am going to raise some questions and try to answer them in this post.&lt;&#x2F;p&gt;
&lt;p&gt;All code is run on Firefox Developer Edition 57.0b11 (64-bit) in macOS.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;initialization&quot;&gt;Initialization&lt;&#x2F;h2&gt;
&lt;p&gt;Most of this post will be used to compare &lt;a href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Web&#x2F;JavaScript&#x2F;Reference&#x2F;Global_Objects&#x2F;Set&quot;&gt;Set()&lt;&#x2F;a&gt; with &lt;a href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Web&#x2F;JavaScript&#x2F;Reference&#x2F;Global_Objects&#x2F;Array&quot;&gt;Array()&lt;&#x2F;a&gt; for some common operations. To initialize a Set() I will be constructing it with an Array.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;set1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Set&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;([&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;6&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;]);

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;set1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;has&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; true

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;set1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Set [ 1, 2, 3, 4, 5, 6 ]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h2 id=&quot;uniqueness&quot;&gt;Uniqueness&lt;&#x2F;h2&gt;
&lt;p&gt;Without the common set operations defined the JavaScript Set() can be seen as a glorified container that only stores unique elements. When you put a repeated element it actually replaces the existing one.&lt;&#x2F;p&gt;
&lt;p&gt;This is quite useful for primitive values.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;set1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;set1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;set1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;set1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Set [ 1, 2, 3, 4, 5, 6 ]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Unlike Arrays the value will not be repeated when you add it to a Set.&lt;&#x2F;p&gt;
&lt;p&gt;For object values this is not that simple as Set uses references for those values;&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;set2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Set&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;([{ value: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;}, { value: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;}]);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;obj1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= { value: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;};
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;set2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;obj1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;set2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Set [{ value: 1}, { value: 2}, { value: 2 }]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The reference is used as the key in the Set, if we change &lt;code&gt;obj1.value&lt;&#x2F;code&gt; above to something else and add it to the Set, JavaScript will see it as a repeated element and replace the existing reference in the Set.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;obj1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.value = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;foo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;set2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;obj1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; obj1 is already in the set
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;set2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Set [{ value: 1}, { value: 2}, { value: &amp;quot;foo&amp;quot; }]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now just to compare with Arrays, here is a naive implementation to create an array with n values and then filter the unique values in it.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;n &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;100000&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; create an array with &amp;#39;n&amp;#39; random numbers:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;initialArray &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Array&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;++) {
	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;number &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= Math.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;round&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(Math.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;random&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;()*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;);
	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;initialArray&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;number&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;);
}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; naively filter the unique values into a new array
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;uniqueArray &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Array&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;performance&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mark&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;UniqueArrayBefore&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;initialArray&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.length; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;++) {
	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;initialArray&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;];
	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;uniqueArray&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;indexOf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;) === -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;) {
		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;uniqueArray&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;);
	}
}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;performance&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mark&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;UniqueArrayAfter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;performance&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;measure&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;uniqueArray&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;UniqueArrayBefore&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;UniqueArrayAfter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;arrayTotalTime &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;performance&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getEntriesByName&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;uniqueArray&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;)[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;].duration;
console.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;arrayTotalTime&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;uniqueArray&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.length);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 171.08500000000004 63235
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;It takes 171 milliseconds to filter ~64k unique values in a 100k elments array. Not bad.&lt;&#x2F;p&gt;
&lt;p&gt;Now lets compare this naive implementation to just using Set():&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;performance&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mark&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;UniqueSetBefore&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;uniqueSet &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Set&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;initialArray&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; easy!
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;performance&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mark&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;UniqueSetAfter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;performance&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;measure&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;uniqueSet&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;UniqueSetBefore&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;UniqueSetAfter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;setTotalTime &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;performance&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getEntriesByName&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;uniqueSet&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;)[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;].duration;
console.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;setTotalTime&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;uniqueSet&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.size);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 0.8699999999998909 63235
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;That is FAST! ~0.9ms with the same initial 100k array. The good part is that Set does not get worse with the number of elements in it.&lt;&#x2F;p&gt;
&lt;p&gt;This is basic JS and the killer feature of Set()&#x27;s. Use them when you need a container of unique elements and&#x2F;or to filter unique elements in any iterable container.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;presence&quot;&gt;Presence&lt;&#x2F;h2&gt;
&lt;p&gt;Checking if an element is present is also easy in a Set and arguably an operation quite common for containers like these.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;set1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;has&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; true
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;set1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;has&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1337&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; false
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Arrays also have a presence function called &lt;code&gt;indexOf&lt;&#x2F;code&gt;: it returns the index of the element or -1 if it is not present.&lt;&#x2F;p&gt;
&lt;p&gt;To compare &lt;code&gt;Array.indexOf()&lt;&#x2F;code&gt; to &lt;code&gt;Set.has()&lt;&#x2F;code&gt; here is a quick test that runs 10000 indexOf&#x27;s (in array) and has&#x27;s (in Set) for an Array and Set of 100 elements:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;size &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; the Array and Set size
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Array&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;size&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;++) {
	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(Math.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;round&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(Math.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;random&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;()*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;size&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;));
}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;s &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Set&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;);

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ops &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10000&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;indexAll &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;performance&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mark&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Array Before&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ops&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;++) {
	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;indexAll &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;+= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;indexOf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(Math.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;round&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(Math.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;random&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;()*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;size&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;));
	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; ^ just to do some operation
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;performance&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mark&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Array After&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;performance&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;measure&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Array.indexOf()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Array Before&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Array After&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;arrayTotalTime &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;performance&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getEntriesByName&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Array.indexOf()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;)[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;].duration;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;setValue &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;performance&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mark&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Set Before&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ops&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;++) {
	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;setValue &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;+= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;has&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(Math.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;round&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(Math.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;random&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;()*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;size&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;));
	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; ^ same as above just to do some operation
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;performance&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mark&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Set After&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;performance&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;measure&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Set.has()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Set Before&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Set After&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;setTotalTime &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;performance&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getEntriesByName&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Set.has()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;)[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;].duration;

console.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;setValue&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;indexAll&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;);
console.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;SET: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;setTotalTime&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;ARRAY: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;arrayTotalTime&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; SET:  17.68499999999767 ARRAY:  20.924999999995634
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;A slight difference. Multiple executions give values that are coherent with these (not an outlier).
&lt;code&gt;Set.has()&lt;&#x2F;code&gt; is faster than the &lt;code&gt;Array.indexOf()&lt;&#x2F;code&gt; even for small Arrays.&lt;&#x2F;p&gt;
&lt;p&gt;The difference of execution just gets bigger as the size of the containers increase.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; size = 1000;
&#x2F;&#x2F; SET:  21.014999999999418 ARRAY:  54.00500000000102
&#x2F;&#x2F; size = 10000;
&#x2F;&#x2F; SET:  17.44499999999971 ARRAY:  398.505000000001
&#x2F;&#x2F; size = 100000;
&#x2F;&#x2F; SET:  19.770000000004075 ARRAY:  3779.524999999994
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;Set.has()&lt;&#x2F;code&gt; execution time doesn&#x27;t seem to differ with the set size. The JS spec tells us why:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;&amp;quot;Set objects must be implemented using either hash tables or other mechanisms that, on average, provide access times that are sublinear on the number of elements in the collection.&amp;quot;&lt;&#x2F;em&gt; &lt;a href=&quot;http:&#x2F;&#x2F;www.ecma-international.org&#x2F;ecma-262&#x2F;6.0&#x2F;#sec-set-objects&quot;&gt;[*]&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;It does not even bother heating your CPU as my browser probably implements this to be O(shiznit(n)) for a large enough n (I will not go into detail here so I will leave the measurement as an exercise for you as it is always important&#x2F;necessary to measure Big-O behaviours).&lt;&#x2F;p&gt;
&lt;h2 id=&quot;insertion-speed&quot;&gt;Insertion speed&lt;&#x2F;h2&gt;
&lt;p&gt;Right now Sets seem really cool, how about we check how fast is the add() method in comparison to an array push(), like we did in the &lt;a href=&quot;https:&#x2F;&#x2F;hugodaniel.com&#x2F;posts&#x2F;in-loving-memory-of-immutable&#x2F;&quot;&gt;Immutable.List vs Array article&lt;&#x2F;a&gt; ?&lt;&#x2F;p&gt;
&lt;p&gt;The code is simple, two loops, one for Array.push() and another for Set.add().&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;s &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Set&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Array&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ammount &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;100000&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;performance&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mark&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;ArrayBefore&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ammount&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;++) {
	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;);
}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;performance&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mark&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;ArrayAfter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;performance&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;measure&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Array.push&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;ArrayBefore&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;ArrayAfter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;);

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;performance&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mark&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;SetBefore&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ammount&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;++) {
	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;);
}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;performance&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mark&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;SetAfter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;performance&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;measure&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Set.add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;SetBefore&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;SetAfter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;arrayTime &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;performance&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getEntriesByName&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Array.push&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;)[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;].duration;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;setTime &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;performance&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getEntriesByName&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Set.add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;)[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;].duration;
console.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(`&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Array.push in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;arrayTime&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;ms; Set.add in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;setTime&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;ms;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;`);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Array.push in 4.054999999993015ms; Set.add in 20.915000000037253ms;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Ah! Arrays are much faster (5x) in insertion than Sets. If you are an experience developer this is not really surprising at all, but still it is nice to check.
Be aware that insertion speed grows linearly in Arrays and non-linearly in Sets:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; ammount = 100000;
&#x2F;&#x2F; Array.push in 4.054999999993015ms; Set.add in 20.915000000037253ms;
&#x2F;&#x2F; ammount = 1000000;
&#x2F;&#x2F; Array.push in 17.175000000046566ms; Set.add in 417.03999999992084ms;
&#x2F;&#x2F; ^ ~4x more than prev.               ^ ~20x more than prev.
&#x2F;&#x2F; ammount = 10000000;
&#x2F;&#x2F; Array.push in 349.8299999999581ms; Set.add in 3902.625ms;
&#x2F;&#x2F; ^ ~20x more than prev.             ^ ~10x more than prev.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We could continue, but JavaScript numbers are &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Double-precision_floating-point_format&quot;&gt;64 bit double precision floating point values&lt;&#x2F;a&gt;. Which means that for integer values they will use 52bits of storage for the significand. Which in turn means that for the next ammount (100000000) I would need 650MB of memory just to store the numbers + the overhead of the Array and Set data structures.&lt;&#x2F;p&gt;
&lt;p&gt;Another exercise for the reader :D&lt;&#x2F;p&gt;
&lt;p&gt;If you are doing a cheap fast logger, then Array is a better choice than Set since it inserts much faster. Set add() is probably implemented to have a better &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Big_O_notation&quot;&gt;O(some BS here)&lt;&#x2F;a&gt; than the Array push() and it will likely not be much slower than 10x the previous running order. But their measured absolute value is way slower and this is what really matters, always measure your code if you care about performance because overhead can creep in the most unexpected places (I am not sure if this is the case, but still...).&lt;&#x2F;p&gt;
&lt;h2 id=&quot;iteration-speed&quot;&gt;Iteration speed&lt;&#x2F;h2&gt;
&lt;p&gt;If you are wondering how Set performs in the need to iterate through its elements, wonder no further.&lt;&#x2F;p&gt;
&lt;p&gt;Again the two cycles, this time using for..of to go through the Set items.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;s &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Set&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Array&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ammount &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;100000&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sum &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ammount&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;++) {
	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;);
}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;performance&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mark&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;ArrayBefore&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.length; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;++) {
	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sum &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;+= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;];
}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;performance&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mark&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;ArrayAfter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;performance&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;measure&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Array.for&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;ArrayBefore&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;ArrayAfter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;);

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ammount&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;++) {
	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;);
}
console.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sum&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sum &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;performance&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mark&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;SetBefore&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;item &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;of &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;) { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; &amp;lt;- here
	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sum &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;+= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;item&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;;
}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;performance&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mark&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;SetAfter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;performance&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;measure&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Set.for&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;SetBefore&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;SetAfter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;arrayTime &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;performance&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getEntriesByName&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Array.for&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;)[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;].duration;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;setTime &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;performance&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getEntriesByName&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Set.for&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;)[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;].duration;
console.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sum&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;);
console.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(`&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Array.for in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;arrayTime&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;ms; Set.for in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;setTime&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;ms;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;`);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Array.for in 4.44999999999709ms; Set.for in 9.239999999997963ms;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;No surprises here. Array sequential values are faster to iterate than Set values (which iterates in insertion order).&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; ammount = 100000;
&#x2F;&#x2F; Array.for in 4.44999999999709ms; Set.for in 9.239999999997963ms;
&#x2F;&#x2F; ammount = 1000000;
&#x2F;&#x2F; Array.for in 9.044999999998254ms; Set.for in 55.14499999998952ms;
&#x2F;&#x2F; ammount = 10000000;
&#x2F;&#x2F; Array.for in 74.47000000000116ms; Set.for in 180.13999999999942ms;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Arrays are faster for sequential iteration of lots of data.
Converting the Set to an Array is not going to help here because &lt;a href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Web&#x2F;JavaScript&#x2F;Reference&#x2F;Global_Objects&#x2F;Array&#x2F;from&quot;&gt;&lt;code&gt;Array.from&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; iterates through the argument to perform the convertion.&lt;&#x2F;p&gt;
&lt;p&gt;Just deal with it :)&lt;&#x2F;p&gt;
&lt;h2 id=&quot;set-operations&quot;&gt;Set operations&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;paulo_coding.jpg&quot; alt=&quot;A pic I took more than a decade ago. Paulo, one of the best hackers I have met. Nikon FM2 50mm1.2f, Kodak E100G film, double exposure.&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;We saw that Set construction and presence checking are extremely fast operations when compared to their Array counterparts. With this in mind the set operations can be easily and naively done.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;union&quot;&gt;Union&lt;&#x2F;h3&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;union &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Set&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;([...&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;set1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, ...&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;set2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;]);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Creates a new set with the &lt;em&gt;unique&lt;&#x2F;em&gt; values on set1 and set2 (no repeated values). If you don&#x27;t care about uniqueness then just use Arrays and &lt;a href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Web&#x2F;JavaScript&#x2F;Reference&#x2F;Global_Objects&#x2F;Array&#x2F;concat&quot;&gt;&lt;code&gt;concat()&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; them.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;difference&quot;&gt;Difference&lt;&#x2F;h3&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;diff &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Set&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;([...&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;set1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;filter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;set2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;has&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;)));
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h3 id=&quot;intersection&quot;&gt;Intersection&lt;&#x2F;h3&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;intersected &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Set&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;([...&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;set1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;filter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;set2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;has&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;)));
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Simple as long as you remember that for objects they work with references instead of values.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Use Set() when unique values matter&lt;&#x2F;li&gt;
&lt;li&gt;Set.has() is much faster than Array.indexOf()&lt;&#x2F;li&gt;
&lt;li&gt;Array.push() is much faster than Set.add()&lt;&#x2F;li&gt;
&lt;li&gt;Arrays are faster to iterate sequentially&lt;&#x2F;li&gt;
&lt;li&gt;Union, Difference, Intersection are easy to implement with Set&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Set&#x27;s are a big part of my project &lt;a href=&quot;https:&#x2F;&#x2F;gridgenerator.com&quot;&gt;Grid Generator&lt;&#x2F;a&gt;. Keeping these small concepts close to the heart can help you leverage Sets to achieve very good performance even in mobile devices.&lt;&#x2F;p&gt;
&lt;p&gt;I hope this post was valuable in any way to you. If you are interested &lt;a href=&quot;https:&#x2F;&#x2F;hugodaniel.com&#x2F;posts&#x2F;mastering-console-log&#x2F;&quot;&gt;here is my take on console.log()&lt;&#x2F;a&gt; and also a &lt;a href=&quot;https:&#x2F;&#x2F;hugodaniel.com&#x2F;posts&#x2F;in-loving-memory-of-immutable&#x2F;&quot;&gt;look into Immutable&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Lisbon as an inspiration for my project</title>
		<published>2017-10-25T00:00:00+00:00</published>
		<updated>2017-10-25T00:00:00+00:00</updated>
		<link href="https://hugodaniel.com/posts/lisbon-as-an-inspiration-for-my-project/" type="text/html"/>
		<id>https://hugodaniel.com/posts/lisbon-as-an-inspiration-for-my-project/</id>
		<content type="html">&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;Lisbon_gridgenerator1.jpg&quot; alt=&quot;Diptych of Lisbon graffitti in portuguese tiles together with the downtown Lisbon ground&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Recently I was somewhat &amp;quot;forced&amp;quot; to think about the story behind the idea I am working on. If you go to these startup and entrepreneurship events you will see that most projects have some kind of a story behind them.
Either they start up in a garage (Apple), or they decided to improve their hobbyist girl discrimination app (facebook), or they just somehow were blessed by some mystical event that got their idea and team together to disrupt the universe.&lt;&#x2F;p&gt;
&lt;p&gt;When my reality clashed with that one I realized that I did not have a special motivation to do a &lt;a href=&quot;https:&#x2F;&#x2F;gridgenerator.com&quot;&gt;pattern and shapes app&lt;&#x2F;a&gt; besides my desire to make a cool project come to life.
So I decided to do what it seemed like the best approach to move forward: I lead myself into a spiral of paranoia and depression for not taking in consideration the necessary planets alignment.&lt;&#x2F;p&gt;
&lt;p&gt;Afterall, why am I doing what I am doing ? Why drawing ? Why shapes and patterns ? What is my story ? How do I sell my idea ? What drives my &amp;quot;pitch&amp;quot; ?
All entrepreneurs seem to have the answers for these questions well sorted out as they always come up with some amazing tale of fortune and success.&lt;&#x2F;p&gt;
&lt;p&gt;Me?
I am just a person who worked in the public sector for 6 years. Quit out of frustration. Worked 2 months for a consulting company. Quit out of more frustration. Worked less than a year in a startup and quit to avoid medical insanity.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;Lisbon_gridgenerator2.jpg&quot; alt=&quot;A random person walking downwards with a building frontage covered in tiles in the background&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Since college that I am full of myself with photography. I really think that I am the last Coca-Cola in the desert in regards to photography.
Instead of studying for the exams I would spend hours roaming around Lisbon and taking pictures of every little bit of this city. I would then proceed to use them to produce poems that were even more pretentious than the pictures.
Which inevitably led me to fail a lot of years in university. I have pictures to show for it :)&lt;&#x2F;p&gt;
&lt;p&gt;Lucky for me Lisbon is one of the most beautiful cities in the world, so some pictures turned out ok in spite of my lack of talent for photography. The ones that were good were mostly about:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Tagus scenery (hard to miss)&lt;&#x2F;li&gt;
&lt;li&gt;Buildings frontages&lt;&#x2F;li&gt;
&lt;li&gt;Portuguese sidewalks&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;Lisbon_gridgenerator3.jpg&quot; alt=&quot;A building in Lisbon&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The ammount of patterns and small details in Lisbon is impressive. Be it on the walls, or on the ground, or inside or outside of buildings. I guess this is the only explanation I can think of for my interest in shapes and geometric patterns.&lt;&#x2F;p&gt;
&lt;p&gt;In a few days Lisbon will be full of people from different culture(s) who are coming in for the WebSummit. If you are visiting don&#x27;t forget to look at the floors and walls.
They are a source of inspiration.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;Lisbon_gridgenerator4.jpg&quot; alt=&quot;Diptych of a messed up sidewalk diagonal grid and the door detail of a church in &amp;quot;Martim Moniz&amp;quot; where the frontage is entirely rendered on the ground sidewalk&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;If you liked this post &lt;a href=&quot;https:&#x2F;&#x2F;gridgenerator.com&quot;&gt;check out my project&lt;&#x2F;a&gt; and the reason why &lt;a href=&quot;https:&#x2F;&#x2F;hugodaniel.com&#x2F;posts&#x2F;why-i-decided-to-go-to-the-websummit&#x2F;&quot;&gt;I am going to the WebSummit&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Why I decided to go to the WebSummit?</title>
		<published>2017-10-24T00:00:00+00:00</published>
		<updated>2017-10-24T00:00:00+00:00</updated>
		<link href="https://hugodaniel.com/posts/why-i-decided-to-go-to-the-websummit/" type="text/html"/>
		<id>https://hugodaniel.com/posts/why-i-decided-to-go-to-the-websummit/</id>
		<content type="html">&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;websummit1_tagusriver.jpg&quot; alt=&quot;Tagus river by sunset in Lisbon, with a background bridge that shares some similarities with the Golden Gate in San Francisco&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Personally I find it impossible to answer this question. I feel that it was not me who actually took the decision to go to the WebSummit. Even though I did.&lt;&#x2F;p&gt;
&lt;p&gt;It all hapened through a sequence of chained events that led me to have to decide to buy a discounted alpha ticket to go there.&lt;&#x2F;p&gt;
&lt;p&gt;At first the WebSummit has two big &amp;quot;no&amp;quot;&#x27;s: the price and if you can actually get something useful from it. I can argue that there is some pressure to go when you have the whole city talking about this conference and you know quite a few people that are going there. How can you miss the even where supposedly everything is hapenning ?&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;websummit1_me.jpg&quot; alt=&quot;Me in Lisbon at the top of the arc in Rua Augusta enjoying a sunny day&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;gridgenerator.com&quot;&gt;My project is a web app to help people work their graphical ideas&lt;&#x2F;a&gt; without having to learn pro software so that they can use these ideas in their daily lives. Technically it is a grid where each element has itself a customized grid inside. Besides this it also has a cool way to help select colors that match and work well with each other.
I have not yet released it, so I don&#x27;t have any market data to show off. I am not looking for investment for two main reasons: I want to bootstrap it and it currently is in an early stage (almost fully developed but still before market).&lt;&#x2F;p&gt;
&lt;p&gt;I talked beforehand to some people that went to the 2016 edition, and they said that it&#x27;s a big event, so big that it is confusing to be there. Also most people that go are looking for investment. All these people that I talked to work for some company that paid their tickets, so I had to keep that in mind when considering their opinion (myself being a bootstrapper).&lt;&#x2F;p&gt;
&lt;p&gt;Because of this initially I had decided not to go. Then I talked to my mentor and he insisted that I considered the pros and cons of going and not going.
I then changed my mind into going to the WebSummit because he convinced me that the potential to expand my contact network and talk to people that might be interested in the project was something that at this stage would be very good overall.&lt;&#x2F;p&gt;
&lt;p&gt;Hence the decision to give WebSummit a chance. I applied to their &amp;quot;alpha ticket&amp;quot;, got selected after a quick interview and they sold me a ~520EUR pass available. This was &lt;em&gt;a lot&lt;&#x2F;em&gt; for me to pay. Even considering that I would be getting 3 tickets and a stand there for my project during one day. But I bit the bullet considering that I am living in Lisbon and that I would have no further big expenses.&lt;&#x2F;p&gt;
&lt;p&gt;That was three months ago, meanwhile I have already considered and reconsidered my previous decision, and my current status is still a bit doubtful about the WebSummit as a worthwhile experience for a bootstrapper. I am certainly not going to look for an investment (like most people apparently go) and the real benefits that I think I will obtain are not easily tangible (personal development and enrichment, maybe some hope of having inspirational talks with different minded people).&lt;&#x2F;p&gt;
&lt;p&gt;Maybe in WebSummit I will meet people that can open my mind to other different kinds of funding. Maybe in the future I will do a kickstarter campaign or some other kind of funding project.
Right now I know that at least I get the chance to be in the same place as Al Gore and other great thinkers...&lt;&#x2F;p&gt;
&lt;p&gt;If you liked this post check out &lt;a href=&quot;https:&#x2F;&#x2F;hugodaniel.com&#x2F;posts&#x2F;lisbon-as-an-inspiration-for-my-project&#x2F;&quot;&gt;Lisbon as an inspiration for my project&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>In loving memory of Immutable.js</title>
		<published>2017-10-03T00:00:00+00:00</published>
		<updated>2017-10-03T00:00:00+00:00</updated>
		<link href="https://hugodaniel.com/posts/in-loving-memory-of-immutable/" type="text/html"/>
		<id>https://hugodaniel.com/posts/in-loving-memory-of-immutable/</id>
		<content type="html">&lt;p&gt;Any JavaScript spaghetti worth its salt won&#x27;t keep track of its objects references or their updates.
These are things that happen between the mind of a chef and the ether of a planned portion with lots of defensive copying.
&lt;a href=&quot;https:&#x2F;&#x2F;facebook.github.io&#x2F;immutable-js&#x2F;&quot;&gt;Immutable.js&lt;&#x2F;a&gt; aims to reduce these portion sizes to match the ones in fancy restaurants while avoiding ingredients like:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;JSON.parse(JSON.stringify(obj))

&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;To try out this new pepper lets open the developer tools in a new tab and sharpen our sour-sweet tooth.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;devtools.png&quot; alt=&quot;Screenshot of the Firefox developer tools in console mode.&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;how-many-calories-has-the-appetizer&quot;&gt;How many calories has the appetizer ?&lt;&#x2F;h2&gt;
&lt;p&gt;In order to measure the amount of memory that Immutable.js uses by itself lets marinate it in a quick and dirty formula:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Open the devtools&lt;&#x2F;li&gt;
&lt;li&gt;Define a simple array with a single item in it and print it to the console
&lt;ul&gt;
&lt;li&gt;&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; let test1 = [1337];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; console.log(test1);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Measure the memory usage (memory tab of the dev tools)&lt;&#x2F;li&gt;
&lt;li&gt;Load Immutable.js directly into the console (copy pasting its minified source directly into the console)&lt;&#x2F;li&gt;
&lt;li&gt;Define a simple list with a single item in it and print it to the console
&lt;ul&gt;
&lt;li&gt;&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; let test2 = Immutable.List.of(1337);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; console.log(test2);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Measure the memory usage again&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;The key points are 3. and 6. so lets do it and take a look into the memory info. For these measures I am using Firefox Developer Edition 53.0a2 (2017-03-05) (64-bit) in OSX Sierra.&lt;&#x2F;p&gt;
&lt;p&gt;After point 3. I have 2.11MB of used memory with the following layout:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;scripts&lt;&#x2F;em&gt;: 37KiB (347 objects)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;em&gt;strings&lt;&#x2F;em&gt;: 362KiB (9685 objects)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;em&gt;objects&lt;&#x2F;em&gt;: 813KiB (11325 objects)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;em&gt;other&lt;&#x2F;em&gt;: 849KiB (18365 objects)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;This is for nothing but an empty tab with devtools opened after point 3. in the magic formula.&lt;&#x2F;p&gt;
&lt;p&gt;Now lets load &lt;a href=&quot;https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;facebook&#x2F;immutable-js&#x2F;master&#x2F;dist&#x2F;immutable.min.js&quot;&gt;Immutable.js raw minification&lt;&#x2F;a&gt; and run the rest of the steps.&lt;&#x2F;p&gt;
&lt;p&gt;After point 6.  I have 2.53MB of used memory with the following layout:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;scripts&lt;&#x2F;em&gt;: 248KiB (1717 objects)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;em&gt;strings&lt;&#x2F;em&gt;: 384KiB (10252 objects)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;em&gt;objects&lt;&#x2F;em&gt;: 904KiB (12618 objects)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;em&gt;other&lt;&#x2F;em&gt;: 933KiB (19984 objects)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;Immutable.js makes the memory usage go up from 2.1MB to about 2.5MB.&lt;&#x2F;strong&gt; That&#x27;s around 0.4MB just to load the minified Immutable.js in memory.&lt;&#x2F;p&gt;
&lt;p&gt;Lets keep this value as a reference in further tests. I am keeping these memory snapshots also for further reference.&lt;&#x2F;p&gt;
&lt;p&gt;How can we leverage the juice from these 0.4MB into our secret sauce ?&lt;&#x2F;p&gt;
&lt;h2 id=&quot;a-list-of-many-secrets&quot;&gt;A list of many secrets&lt;&#x2F;h2&gt;
&lt;p&gt;Immutable allows the discerning chef to cook with well defined ingredients. You can define your own data types and use them as immutable everywhere you want to. To do that the Immutable.Record is their provided interface. &lt;&#x2F;p&gt;
&lt;p&gt;The following code uses it to define a data type for a 2D point, with X and Y coordinates, and then create some points with it.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;const Pt = Immutable.Record( { x: 0, y: 0} );

const pt1 = new Pt(); &#x2F;&#x2F; uses x: 0, y: 0 by default
const pt2 = new Pt({ y: 123 }); &#x2F;&#x2F; uses x: 0 by default
const pt3 = new Pt({ x: 123, y: 321 }); &#x2F;&#x2F; uses your provided values
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Fast-food junkies could do the same in straight JS with the simpler approach:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;function PtJS(x = 0, y = 0) {
	this.x = x;
	this.y = y;
}

let jspt1 = new PtJS();
let jspt2 = new PtJS(0, 123);
let jspt3 = new PtJS(123, 321);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Some might even argue that they are not wasting the memory that Immutable is. Master chefs are always looking for opportunities to learn, to study and to teach. &lt;&#x2F;p&gt;
&lt;p&gt;Now for a simple test, create a list with 10000 of those 2D points and compare memory readings of the Immutable approach with the plain JS approach.&lt;&#x2F;p&gt;
&lt;p&gt;First the plain JS approach (lets assume the constructor is already created as above).&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;
let testArray = [];
for(let i = 0; i &amp;lt; 10000; i++) {
  testArray.push(new PtJS());
}

&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;After measuring this in the Memory tab we get 2.92MB in this layout:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;scripts&lt;&#x2F;em&gt;: 228KiB (1692 objects)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;em&gt;strings&lt;&#x2F;em&gt;: 384KiB (10251 objects)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;em&gt;objects&lt;&#x2F;em&gt;: 1MiB (22688 objects)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;em&gt;other&lt;&#x2F;em&gt;: 888KiB (19990 objects)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;That seems fair, we get an increase of about 390KiB in comparison to our previous measurement. That should be enough motivation to roll our Chefs Knives suitecase of Persistency and do it in Immutable style to measure it on top of this 2.92MB already in use.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;const defaultPt = new Pt();
const testLst = Immutable.Repeat(defaultPt, 10000);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;After measuring this in the Memory tab we get 2.91MB. This is a decrease of about 10KiB from our previous memory usage. How is this possible ? Is the data even there ?&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;testLst.first().x;
&#x2F;&#x2F; returns 0
testLst.size();
&#x2F;&#x2F; returns 10000
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Yep, it&#x27;s all there. Immutable.js allows you to take good care of your memory, but as with all sharp knifes you need to know how to avoid hurting yourself. Lets dive a bit further to understand what is going on and how to master these data structures.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;master-chef-mystery-boxes&quot;&gt;Master Chef Mystery Boxes&lt;&#x2F;h2&gt;
&lt;p&gt;One common misconception about immutable data structures is that there is a lot of useless copying being done. In fact this is so common that there are even &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rtfeldman&#x2F;seamless-immutable&quot;&gt;JS libraries based on it&lt;&#x2F;a&gt;. Playing with the flavour of common things note the most typical data structure in functional languages.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;the-single-linked-list&quot;&gt;The single linked list.&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;immutable-list1.gif&quot; alt=&quot;A single linked list with 3 values&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Supposed that this is a immutable list. It is not possible to add, remove or change its values without returning a new version of it.&lt;&#x2F;p&gt;
&lt;p&gt;Does this mean that we need to copy all of it when we need to put a new value in it ? Not necessarily. We can just create the new list item and make sure its pointer is targeting the beginning of the original list.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;immutable-list2.png&quot; alt=&quot;Placing a new value in the previous list&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;This works because the list is immutable, we know for sure that the original list won&#x27;t change so &lt;strong&gt;it is possible to reuse its values&lt;&#x2F;strong&gt;, no copying is involved in this.&lt;&#x2F;p&gt;
&lt;p&gt;As before, our new immutable list is again defined by its first value, which in this new case is our new value.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;master-the-simple-cuts-first&quot;&gt;Master the simple cuts first&lt;&#x2F;h3&gt;
&lt;p&gt;Many operations are possible on our immutable single linked list that leverage the fact that it is an immutable list.&lt;&#x2F;p&gt;
&lt;p&gt;Operations like &lt;em&gt;head&lt;&#x2F;em&gt; (return the first value in the list) and &lt;em&gt;tail&lt;&#x2F;em&gt; (return all the items in the list except for the first) are almost instantaneous to implement. For &lt;em&gt;head&lt;&#x2F;em&gt; we just return the value of the first item and for &lt;em&gt;tail&lt;&#x2F;em&gt; we just return the first item pointer value (which is an immutable single linked list, in this case, our original 3 value list).&lt;&#x2F;p&gt;
&lt;h4 id=&quot;concat&quot;&gt;Concat&lt;&#x2F;h4&gt;
&lt;p&gt;Joining two lists is one of those simple operations that is worth your time and attention in order to understand it. If we have 2 different immutable lists that we want to join we need to go to the first list and adjust the last pointer of the last item to point to the first item of the second list.&lt;&#x2F;p&gt;
&lt;p&gt;Here it is in pictures:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;immutable_two_lists.png&quot; alt=&quot;Joining these two lists&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;immutable_two_lists_2.png&quot; alt=&quot;We need to make the last item point to the first item of the second list&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;immutable_two_lists_3.png&quot; alt=&quot;A copy of this element is necessary because we can&#x27;t just change it to point to the first item of lst2&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;immutable_two_lists_4.png&quot; alt=&quot;But now we need to make the previous item point to the newly created copy. So a copy of it will also be necessary.&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;immutable_two_lists_final.png&quot; alt=&quot;That is why to concat two lists a new list is made with a copy of the elements in the first list&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Concat is a heavy operation, it mostly depends on the size of the first list. There are a few tricks to make it faster.&lt;&#x2F;p&gt;
&lt;p&gt;To keep it simple I am not going to go much more into this and move to the point.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-best-recipe-is-made-of-many-subrecipes&quot;&gt;The best recipe is made of many subrecipes&lt;&#x2F;h2&gt;
&lt;p&gt;The list holds data. That&#x27;s why it&#x27;s called a &lt;em&gt;data&lt;&#x2F;em&gt; structure. Now what if instead of directly putting our data in each list item we could instead just point to the data ? Like this:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;immutable_lazy1.png&quot; alt=&quot;List doesn&#x27;t directly hold the data anymore&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The list effectively now holds &lt;strong&gt;a way to reach&lt;&#x2F;strong&gt; each value instead of the real values. We can get more generic and greatly simplify it by saying that in each list item there is a recipe to reach each value. In the above picture this &lt;em&gt;recipe&lt;&#x2F;em&gt; generalization is represented by the red arrows.&lt;&#x2F;p&gt;
&lt;p&gt;Let me try to simplify it with the hope that it might stand out the intended purpose.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;immutable_lazy2.png&quot; alt=&quot;A list of recipes can be a list of values&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The term &lt;em&gt;recipe&lt;&#x2F;em&gt; is not chosen by chance: it represents something that must be done to produce the value that the list item holds.&lt;&#x2F;p&gt;
&lt;p&gt;If we follow the &lt;em&gt;recipe&lt;&#x2F;em&gt; in each item we can get to the intended values. For instance, suppose that this is a list of JS Number&#x27;s, a good recipe to produce the value would be to just call Number() on the data. If it was a list of String&#x27;s, a good recipe would be to call String() on the data. This also holds for very complex values, say this is a list of balanced tree&#x27;s, or your favourite custom complex data type, &lt;strong&gt;a recipe is the way to construct the value&lt;&#x2F;strong&gt;, could just be following a pointer but perhaps that would not be a very useful constructor due to being too general.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;lazy-concat&quot;&gt;Lazy concat&lt;&#x2F;h3&gt;
&lt;p&gt;In our previous look into &lt;em&gt;concat&lt;&#x2F;em&gt; we noticed that it was a heavy operation, requiring a full copy of the first list that we want to join. When working with immutable data there are only a few of these &amp;quot;heavy&amp;quot; operations that do need a full copy.&lt;&#x2F;p&gt;
&lt;p&gt;Now that we are taking quality steps as chefs how about we use a &lt;em&gt;recipe&lt;&#x2F;em&gt; for concat ?&lt;&#x2F;p&gt;
&lt;p&gt;Instead of doing a full copy of the first list, just copy the first element and make it point to a recipe. That way, no matter the size of the lists, concat would be done in a single operation (the first item). Here it is in a picture:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;immutable_concat_lazy.png&quot; alt=&quot;Why copy the whole first list if we don&#x27;t know if it will be needed ?&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Now if we need the second element of the list the recipe will be followed to get it.&lt;&#x2F;p&gt;
&lt;p&gt;That is a simple recipe:
copy the first list up to the needed value, if the copying is done but the intended value is not yet reached then start going through the second list values (without copying them). In the case we want the 2nd value of a concat&#x27;ed list a single copy will happen because we already copied the first item when concat was called. This is a case where the recipe is itself the whole concat operation, meaning that it will only copy until the end of the first list and after it will use the reference of the second list.&lt;&#x2F;p&gt;
&lt;p&gt;This &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Thunk&quot;&gt;&lt;em&gt;recipe&lt;&#x2F;em&gt;&lt;&#x2F;a&gt; approach is usually known as laziness and typically enhanced with a cache of results to avoid copying and constructing the same values over again (this caching approach is known as &amp;quot;memoization&amp;quot;).&lt;&#x2F;p&gt;
&lt;h2 id=&quot;cuisine-du-monde&quot;&gt;Cuisine du monde&lt;&#x2F;h2&gt;
&lt;p&gt;Immutable.js makes good use of these techniques to avoid doing work when necessary and unnecessary copies. Their approach is lean and well thought, clearly separating the values from the way they are traversed.&lt;&#x2F;p&gt;
&lt;p&gt;Lets look at our Immutable approach again:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;const defaultPt = new Pt();
const testLst = Immutable.Repeat(defaultPt, 10000);
testLst.first().x;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;A few things stand out:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;We are always using the same reference &lt;em&gt;defaultPt&lt;&#x2F;em&gt; instead of creating a new value in each item.
&lt;ul&gt;
&lt;li&gt;This is possible thanks to immutability, if we change it we are effectively creating a new value and a new list.&lt;&#x2F;li&gt;
&lt;li&gt;Immutability encourages reutilization and is typically a GC friendly approach.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Repeat just returns a &lt;em&gt;recipe&lt;&#x2F;em&gt; (thunk)
&lt;ul&gt;
&lt;li&gt;No heavy work is actually done, it just returns a way to access and construct the values&lt;&#x2F;li&gt;
&lt;li&gt;We used 10000 but could have used infinite with no performance or memory hit&lt;&#x2F;li&gt;
&lt;li&gt;Work is only done when values are being requested and only up until them.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;Immutable.js also uses a few other tricks to speed up common operations. For instance their List approach uses deques, which means that it keeps your list split in two, so [1,2,3,4,5,6] is kept by Immutable as [1,2,3] and [6,5,4] (reversed rest). This is a very simplified explanation of it, but in practice it allows for very fast insertions in the beginning and end of the list (&lt;a href=&quot;http:&#x2F;&#x2F;blog.klipse.tech&#x2F;javascript&#x2F;2016&#x2F;06&#x2F;23&#x2F;immutable-perf.html&quot;&gt;faster than JS arrays&lt;&#x2F;a&gt;).&lt;&#x2F;p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;Immutable is certainly a different way of doing JS. Given the normal tendency JS coders have to lean more towards object oriented concepts, immutable feels like the schrodinger&#x27;s immigrant in a foreign land.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;immigrant.jpeg&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;I hope this post was in any way useful to you. Immutable sure is a fun library to get to know and work with. &lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>vi is not vim</title>
		<published>2017-08-12T00:00:00+00:00</published>
		<updated>2017-08-12T00:00:00+00:00</updated>
		<link href="https://hugodaniel.com/posts/vi-is-not-vim/" type="text/html"/>
		<id>https://hugodaniel.com/posts/vi-is-not-vim/</id>
		<content type="html">&lt;p&gt;When dinossaurs ruled the earth there was a young kid that had just installed Red Hat Linux 5 on his computer.&lt;br&#x2F;&gt;
Fascinated with the &amp;quot;OS for the elite&amp;quot; he was about to experience a devouring frustration.
The kind that gives rise to dark divinities that come to haunt you in your sleep for years to come:&lt;&#x2F;p&gt;
&lt;p&gt;Trying to exit vim.&lt;&#x2F;p&gt;
&lt;p&gt;After a few unsuccessful atempts the computer &lt;em&gt;power switch&lt;&#x2F;em&gt; was the only option left. Like that the dream of a promising carreer in elite-land was shattered for that young boy.&lt;&#x2F;p&gt;
&lt;p&gt;That young boy was me.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;high-tech-editor-low-tech-coder&quot;&gt;High tech editor, low tech coder&lt;&#x2F;h2&gt;
&lt;p&gt;My stubbornness always took the best part of my reason and vim was my editor for years to come. Since rough starts are the perfect driver for a good love story I then ditched it to take a stroll in netbeans land. &lt;br&#x2F;&gt;After a while a pardon was due and got back to it again. Then I ditched it again for Visual Studio. &lt;br&#x2F;&gt;Got back to it again. And so on.&lt;&#x2F;p&gt;
&lt;p&gt;Code editors today try to do everything and a pair of boots. Even vim, known for its minimalist looks, is very prone to config-pr0n worthy of the most wild and nasty fantasies.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;i-ll-show-you-mine-if-you-show-me-yours&quot;&gt;I&#x27;ll show you mine if you show me yours&lt;&#x2F;h2&gt;
&lt;p&gt;At one point I got myself in the middle of a config discussion between developers. They were arguing about good .vimrc config options and plugins for vim.&lt;&#x2F;p&gt;
&lt;p&gt;I decided to participate and show my ~60 lines .vimrc file. They laughed. It was so small. Almost useless.&lt;&#x2F;p&gt;
&lt;p&gt;That got me thinking:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;What do i &lt;em&gt;really&lt;&#x2F;em&gt; need in a code editor ?&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;After giving a hard thought on my usage&#x2F;preferences and some possible optimizations I took a look into the market of code editors and decided to &lt;strong&gt;upgrade from vim to vi&lt;&#x2F;strong&gt; (by vi I mean &lt;a href=&quot;http:&#x2F;&#x2F;repo.or.cz&#x2F;nvi.git&quot;&gt;nvi 1.81.6, still maintained and developed here&lt;&#x2F;a&gt; ).&lt;&#x2F;p&gt;
&lt;p&gt;The rest of this blog post is about some nvi parts (vi, not vim), in particular some parts that are percieved as limitations. I will run through them and try to provide arguments that favor them and reasons to use them. Have your salt and pepper at hand before reading further.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;minimal-config-file-exrc&quot;&gt;Minimal config file (.exrc)&lt;&#x2F;h2&gt;
&lt;p&gt;The nvi config file is named .exrc, here is my current setup:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;set showmode
set showmatch
set ruler
set shiftwidth=2
set tabstop=2
set verbose
set leftright
set cedit=\
set filec=\
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;9 lines only. No maintenance. No BS.&lt;&#x2F;p&gt;
&lt;p&gt;These options are mostly similar to those in .vimrc, a special note for cedit and filec, these have a =\&amp;lt;TAB&amp;gt; (the &amp;lt;TAB&amp;gt; is the actual tab character there after the \).
The &lt;strong&gt;cedit&lt;&#x2F;strong&gt; property sets the character to trigger command expansion in the vi command colon mode. The &lt;strong&gt;filec&lt;&#x2F;strong&gt; sets the the character for file name expansion (auto-complete) when opening a new file inside vi (e.g. with :e).&lt;&#x2F;p&gt;
&lt;p&gt;All of these are well documented in the man page.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;$ man nvi
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h2 id=&quot;no-unicode-support&quot;&gt;No unicode support&lt;&#x2F;h2&gt;
&lt;p&gt;There are some vi implementations that support multibyte characters like &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;lichray&#x2F;nvi2&quot;&gt;nvi2&lt;&#x2F;a&gt;. But for this blog post I am assuming your vi is plain &lt;a href=&quot;https:&#x2F;&#x2F;sites.google.com&#x2F;a&#x2F;bostic.com&#x2F;keithbostic&#x2F;vi&#x2F;&quot;&gt;nvi&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;No multibyte, wide-char, wtf-8, extended codepoints. Although those are very important to learn and master I do prefer to keep code in plain strict single-byte ASCII (UTF-8 supersedes it).&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Why ?&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;It keeps the language coherent with the programming reserved words (more than logic constructs, &lt;em&gt;while&lt;&#x2F;em&gt;, &lt;em&gt;for&lt;&#x2F;em&gt;, &lt;em&gt;if&lt;&#x2F;em&gt;, are english words).&lt;&#x2F;p&gt;
&lt;p&gt;It makes it perfectly visible when an accidental wide-char is inserted (particularly helpful if you are using a keyboard layout that does not use the US key-mapping). This is good to make sure your code is available to read on every system, regardless of locale (it even works if someone opens the code you wrote in an editor that is set to default to UTF-8 encoding).&lt;&#x2F;p&gt;
&lt;p&gt;Another good thing is that it works with a wider variety of fonts. Some monospace terminal fonts can&#x27;t correctly display all UTF-8 characters.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;But I sometimes need to write documents with strange characters&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;That is one of the scenarios where I would use another text editor. nvi is strictly a code&#x2F;config editor.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;no-syntax-highlighting&quot;&gt;No syntax highlighting&lt;&#x2F;h2&gt;
&lt;p&gt;This is another personal preference. It has been a long time since I had to worry about syntax when producing code. If you still struggle with syntax then please use syntax highlighting, it will help those special words stand out.
Otherwise why not give it a try without syntax highlighting for a while (a few weeks to be slightly above the habituation threshold) and measure how you perform ?&lt;&#x2F;p&gt;
&lt;p&gt;It does help to keep your functions small and easy to read.&lt;&#x2F;p&gt;
&lt;p&gt;Comments are shown with their true weight and your commented code is promoted to the same importance as your production code.&lt;&#x2F;p&gt;
&lt;p&gt;Your focus will be in semantics and it is easier to get into it without the syntax aggressively jumping at your face.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;fast-undo&quot;&gt;Fast undo&lt;&#x2F;h2&gt;
&lt;p&gt;Like in vim the undo in vi is very convenient but has a slightly different way of operating. Instead of pressing &lt;em&gt;u&lt;&#x2F;em&gt; multiple times to go through the various undo levels and then ctrl-r to redo, in vi you do it by pressing &lt;em&gt;u&lt;&#x2F;em&gt; once to undo and the &#x27;&lt;strong&gt;.&lt;&#x2F;strong&gt;&#x27; to go through the various undo levels.&lt;&#x2F;p&gt;
&lt;p&gt;To redo you press &lt;em&gt;u&lt;&#x2F;em&gt; twice (undo the undo) and then &#x27;&lt;strong&gt;.&lt;&#x2F;strong&gt;&#x27; to go through the multiple redo levels.&lt;&#x2F;p&gt;
&lt;p&gt;I think this is slightly more coherent and it also makes use of the &#x27;&lt;strong&gt;.&lt;&#x2F;strong&gt;&#x27; (repeat action) operator in an arguably more logical way.&lt;&#x2F;p&gt;
&lt;p&gt;Like in vim, you can use the &lt;em&gt;U&lt;&#x2F;em&gt; command to restore a line to the state it was before the cursor was placed on top of it (undoing all the chances since that time).&lt;&#x2F;p&gt;
&lt;h2 id=&quot;no-visual-mode&quot;&gt;No visual mode&lt;&#x2F;h2&gt;
&lt;p&gt;There is no visual mode in vi (visual mode as in pressing the &lt;em&gt;v&lt;&#x2F;em&gt; command and using your movement keys to select an area of text).&lt;&#x2F;p&gt;
&lt;p&gt;At first this might seem like a big handicap, but vi shares a few commands with vim that once mastered can make you more productive than using the visual mode.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Marks &lt;em&gt;m&amp;lt;insert letter here&amp;gt;&lt;&#x2F;em&gt;&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;You can setup marks in text, if you type &lt;em&gt;mx&lt;&#x2F;em&gt; it will define the mark x at the current cursor position. Typically these are used to move quickly through the file and go to certain marked positions. For that the &#x27; command is used followed by the mark character name (moves to the line) or with the ` command (moves to the exact cursor position of the mark). To move to mark x do &#x27;x (assuming you did &lt;em&gt;mx&lt;&#x2F;em&gt; in some place before).&lt;&#x2F;p&gt;
&lt;p&gt;Marks can also be used with other common commands like yank, delete, etc..., so instead of using the visual mode you can yank or delete to a a mark set at some position.&lt;br&#x2F;&gt;
To do that use the &lt;em&gt;t&lt;&#x2F;em&gt; or &lt;em&gt;f&lt;&#x2F;em&gt; commands, like ytx (I read it as: &lt;em&gt;y&lt;&#x2F;em&gt;ank &lt;em&gt;t&lt;&#x2F;em&gt;o &lt;em&gt;x&lt;&#x2F;em&gt;), it will yank all lines up to (but not including) the line at mark x. To include it use the &lt;em&gt;f&lt;&#x2F;em&gt; as in yfx.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;no-tabs&quot;&gt;No tabs&lt;&#x2F;h2&gt;
&lt;p&gt;Tabs was a feature that I used a lot in vim, unfortunately they only work with vim, so if you want to run a shell command or have a terminal to read compiler output you will need to use them with some other kind of tab system.&lt;&#x2F;p&gt;
&lt;p&gt;On my journey to the limits of usefulness I found myself using vim tabs together with tmux tabs and terminal (osx) tabs.&lt;&#x2F;p&gt;
&lt;p&gt;After those crazy days (months ?) I finally decided to ditch all tabs and stick to a single tool for that purpose, one that is versatile enough to cover my use cases for tabs.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Do one thing and do it well&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;tmux&#x2F;tmux&#x2F;wiki&quot;&gt;Tmux&lt;&#x2F;a&gt; is my current tool of choice, nowadays I don&#x27;t use terminal tabs or text editor tabs. I leave that work for tmux, an amazing productivity tool that allows me to work fullscreen in zen mode with the code.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Panes in vi&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Like in vim you can split your window with panes, these are useful to use another section of code as a quick reference or to do some quick yank&#x2F;past in vi between files&#x2F;sections.&lt;&#x2F;p&gt;
&lt;p&gt;The pane system in vi works slightly different from vim. To vertically split the window you can also use the :vs, but to horizontally split the window :sp won&#x27;t work. In vi the command to horizontally split a window is the :E, as in Edit (the same as :e but horizontally split).&lt;&#x2F;p&gt;
&lt;p&gt;To switch between panes ctrl-w will immediately move your cursor to the next window pane. Instead of pressing twice like vim you only need to press it once. This is hard to get used to at first but it is also hard to live without once used to it.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;nvi_tmux_macos.png&quot; alt=&quot;My nvi with tmux on macos&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;no-macros&quot;&gt;No macros&lt;&#x2F;h2&gt;
&lt;p&gt;One feature that I consistently used in vim was macros (vim &lt;em&gt;q&lt;&#x2F;em&gt; command). It was easy to create bundles of commands and run them to do your repeated text tasks or grunt work. Very useful when replicating huge data files or setting up a &lt;a href=&quot;https:&#x2F;&#x2F;hugodaniel.com&#x2F;posts&#x2F;mastering-console-log&#x2F;&quot;&gt;big JSON test file&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;In vi you can also use the power of macros through buffers.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Buff it up&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Buffers are easy to use, you can prefix your common text manipulation commands (dd, yy, etc...) to a named buffer. To do that start the command with &amp;quot;&amp;lt;buffer name&amp;gt; where &amp;lt;buffer name&amp;gt; is any letter from a-z.&lt;&#x2F;p&gt;
&lt;p&gt;Here are some examples:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;To delete 4 lines and place them into buffer a&lt;&#x2F;strong&gt; &amp;quot;a4dd&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;To paste buffer &lt;em&gt;a&lt;&#x2F;em&gt; to the current cursor position&lt;&#x2F;strong&gt; &amp;quot;ap&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;To view all your buffers go to ex mode (:) and do&lt;&#x2F;strong&gt; :di b&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;Who needs macros when you have buffers&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Write a few commands to be executed in your file, place then in a buffer and tell vi that you want to execute the buffer:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;2)
4dd
G
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Line by line:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;move two lines down&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;delete 4 lines&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;go to the end of the file&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;Put these into a buffer named &lt;em&gt;c&lt;&#x2F;em&gt; with &lt;i&gt;&amp;quot;c3yy&lt;&#x2F;i&gt; (yank 3 lines into buffer &lt;em&gt;c&lt;&#x2F;em&gt;), and whenever you want to run it just do &lt;em&gt;@ c&lt;&#x2F;em&gt;. Undo &lt;em&gt;u&lt;&#x2F;em&gt; also works nicely with buffered commands.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;upgrading-from-vim-to-vi&quot;&gt;Upgrading from vim to vi&lt;&#x2F;h2&gt;
&lt;p&gt;There are some cool benefits in using vi like how fast it is and how it handles huge files without a problem.&lt;&#x2F;p&gt;
&lt;p&gt;nvi also performs well in &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jhallen&#x2F;joes-sandbox&#x2F;blob&#x2F;master&#x2F;editor-perf&#x2F;readme.md&quot;&gt;this benchmark of editors&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The case for vi is like any other editor: a matter of getting used to it and keep perfecting your skills through it for what it really matters: writting great code.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;Use what you are more confortable with. There are tradeoffs in every editor (even the mighty visual studio code does not allow you to work without syntax highlighting on...) and today nvi fits nicely with my way of working and approach.&lt;&#x2F;p&gt;
&lt;p&gt;I hope this post to be used as a initial reference and motivation to those that are looking for a more minimalistic way of doing things. I don&#x27;t intend it to start flame wars.&lt;&#x2F;p&gt;
&lt;p&gt;You know all of these are just my opinions :)&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Mastering console.log()</title>
		<published>2017-08-11T00:00:00+00:00</published>
		<updated>2017-08-11T00:00:00+00:00</updated>
		<link href="https://hugodaniel.com/posts/mastering-console-log/" type="text/html"/>
		<id>https://hugodaniel.com/posts/mastering-console-log/</id>
		<content type="html">&lt;p&gt;Using &lt;code&gt;console.log()&lt;&#x2F;code&gt; to debug JavaScript, a dynamic weakly-typed interpreted language, feels like drinking beers on a lazy summer sunday afternoon.&lt;&#x2F;p&gt;
&lt;p&gt;It is easy and you do it without thinking too much on how you could probably be more productive doing something else.&lt;&#x2F;p&gt;
&lt;p&gt;Truth is that in all the other days of the week you don&#x27;t avoid spraying your code with the &lt;a href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Web&#x2F;JavaScript&#x2F;Reference&#x2F;Statements&#x2F;debugger&quot;&gt;&lt;code&gt;debugger&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; keyword and let the developer tools stop and show you the execution context at that exact location.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;function yourCodeThatCouldBeWorking() {
  const x = 1337;
  const y = parseInt(window.prompt(&amp;#39;Y value:&amp;#39;));
  debugger; &#x2F;&#x2F; &amp;lt;- hello
  return (x &#x2F; y);
}

&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;But lazy summer sunday afternoons are on to get us, and &lt;code&gt;console.log()&lt;&#x2F;code&gt; is our friend for the mood.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;console-log-basic-mode&quot;&gt;console.log() basic mode&lt;&#x2F;h2&gt;
&lt;p&gt;The most basic usage of &lt;code&gt;console.log&lt;&#x2F;code&gt; is to just pass it a string. You can step this up a bit by following the string with JS objects and&#x2F;or strings. Like this:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;const v1 = { x: 123, y: 321 };
console.log(&amp;quot;Vector v1: (&amp;quot;, v1.x, &amp;quot;,&amp;quot;, v1.y, &amp;quot;)&amp;quot;);
&#x2F;&#x2F; or just:
console.log(&amp;quot;Vector v1:&amp;quot;, v1);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Try it in your developer tools console (Ctrl Shift i, or in mac Cmd Shift i).&lt;&#x2F;p&gt;
&lt;p&gt;This is a particularly simple and helpful way to properly debug JavaScript. Specially if your code is creating code or functions in runtime, making it hard to setup breakpoints in the debugger window.&lt;&#x2F;p&gt;
&lt;p&gt;But who needs breakpoints when we have &lt;code&gt;console.log&lt;&#x2F;code&gt; ? :)&lt;&#x2F;p&gt;
&lt;h2 id=&quot;colorful-console-log-composer-mode&quot;&gt;Colorful console.log() composer mode&lt;&#x2F;h2&gt;
&lt;p&gt;Besides its simplicity, my next favourite thing in &lt;code&gt;console.log&lt;&#x2F;code&gt; is that it also allows you to pass a format string to be replaced with what you want:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;const v1 = { x: 123, y: 321 };
console.log(&amp;quot;v1 (%i, %i)&amp;quot;, v1.x, v1.y);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;There are a handful of other &lt;a href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Web&#x2F;API&#x2F;console#Using_string_substitutions&quot;&gt;string substitutions&lt;&#x2F;a&gt; you can use.&lt;&#x2F;p&gt;
&lt;p&gt;While apparently this is not a big improvement over the simplest mode, it can be used to do a few things that would not be so easy otherwise.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Colors in console.log&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;You can style your output with CSS through the %c substitution:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;const v1 = { x: 123, y: 321 };
console.log( &amp;quot;%c[Vector 1] %c(%i, %i)%c\nin object %o&amp;quot;
           , &amp;quot;background: #242; color: #bada55&amp;quot;
           , &amp;quot;background: #424; color: #c0ffee&amp;quot;
           , v1.x, v1.y
           , &amp;quot;&amp;quot; &#x2F;&#x2F;&amp;lt;- clears style
           , v1
           );
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;Dynamically create your output&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;You can also compose the log format string with code and pass it the args as needed.
Suppose you are logging messages that can have a varying number of attributes:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;const someMsg =
  { type: &amp;quot;WORKER_ERROR&amp;quot;
  , action: &amp;quot;division&amp;quot;
  , args: [123, 0]
  };

function logMessage(msg) {
  let logFmt = &amp;quot;%c[%s]%c - %c%s%c&amp;quot;;
  let logArgs =
    [ &amp;quot;background: #242; color: #bada55&amp;quot;
    , msg.type
    , &amp;quot;&amp;quot;
    , &amp;quot;background: #424; color: #c0ffee&amp;quot;
    , msg.action
    , &amp;quot;&amp;quot;
    ];
  if (msg.action === &amp;quot;division&amp;quot;) {
    logFmt += &amp;quot;: %i &#x2F; %i&amp;quot;;
    logArgs.push(msg.args[0]);
    logArgs.push(msg.args[1]);
  } else {
    logFmt += &amp;quot; with args %o&amp;quot;;
    logArgs.push(msg.args);
  }
  &#x2F;&#x2F; finally print it:
  console.log(logFmt, ...logArgs);
}

logMessage(someMsg);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h2 id=&quot;measuring-console-log&quot;&gt;Measuring console.log()&lt;&#x2F;h2&gt;
&lt;p&gt;Another thing to keep in mind when using &lt;code&gt;console.log&lt;&#x2F;code&gt; is that it is not free. It does come with a performance hit, how much exactly ? Lets measure it like we did for &lt;a href=&quot;https:&#x2F;&#x2F;hugodaniel.com&#x2F;posts&#x2F;how-fast-is-nothing&#x2F;&quot;&gt;requestAnimationFrame()&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;p&gt;For this test I am going to print just 32 simple console.log messages. I know that this is not a lot, it actually is nothing when compared to using console.log on mousemove events or any other fast firing event, but it should be enough to test.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;performance.mark(&amp;quot;Before&amp;quot;);
&#x2F;&#x2F; print 32 lines
for(let i = 0; i &amp;lt; 32; i++)
  console.log(&amp;quot;One of the simplest console.log() possible&amp;quot;, i);
performance.mark(&amp;quot;After&amp;quot;);
performance.measure(&amp;quot;console.log&amp;quot;, &amp;quot;Before&amp;quot;, &amp;quot;After&amp;quot;);
const totalTime = performance.getEntriesByType(&amp;quot;measure&amp;quot;)[0].duration;
console.log(&amp;quot;console.log() in %ims&amp;quot;, totalTime);
performance.clearMarks();
performance.clearMeasures();
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In my Firefox Developer Edition (56.0b1) console it prints&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;console.log() in 15ms&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;15 milliseconds is &lt;em&gt;a lot&lt;&#x2F;em&gt; of time in a computer perspective, specially since we are just printing 32 messages, it is about 0.45ms per message.&lt;&#x2F;p&gt;
&lt;p&gt;To keep it in perspective here is the time it takes to parse a huge 128KB JSON string:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;function jsonParseAndMeasure(jsonStr) {
  performance.mark(&amp;quot;jsonStart&amp;quot;);
  const json = JSON.parse(jsonStr);
  performance.mark(&amp;quot;jsonEnd&amp;quot;);
  performance.measure(&amp;quot;JSON.parse&amp;quot;, &amp;quot;jsonStart&amp;quot;, &amp;quot;jsonEnd&amp;quot;);
  const totalTime = performance.getEntriesByType(&amp;quot;measure&amp;quot;)[0].duration;
  console.log(&amp;quot;JSON.parse in %ims&amp;quot;, totalTime);
  performance.clearMarks();
  performance.clearMeasures();
}

jsonParseAndMeasure(&amp;quot;HUGE JSON STRING HERE&amp;quot;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;For a 128KB JSON string it prints:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;JSON.parse in 0ms&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Hmm... maybe that is not enough, lets increase it to a 2MB JSON string:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;JSON.parse in 0ms&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Ok... what about a 50MB JSON string ?&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;JSON.parse in 17ms&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Thats more like it. About the same time it took console.log to print 32 simple messages. There are a few attenuating factors for this in production, but it is good to keep this in mind when leaving those debugging messages in your production code ;)&lt;&#x2F;p&gt;
&lt;h2 id=&quot;buffering-console-log&quot;&gt;Buffering console.log()&lt;&#x2F;h2&gt;
&lt;p&gt;There is an alternative if you have your reasons to use &lt;code&gt;console.log&lt;&#x2F;code&gt; in production code: buffering.&lt;&#x2F;p&gt;
&lt;p&gt;Instead of printing each message as it comes, lets place them in an array and dump it in a single &lt;code&gt;console.log&lt;&#x2F;code&gt; call every second or so.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;let buffer = [];
&#x2F;&#x2F; use a log function instead of directly calling console.log:
function log(str, args) {
  buffer.push({ str, args });
}

function printBuffer() {
  &#x2F;&#x2F; start by copying the buffer and clearing it
  const buf = buffer.slice(0);
  buffer = [];
  &#x2F;&#x2F; dump the buffer in a single console.log call
  if (buf.length &amp;gt; 0) {
    let logStr = &amp;quot;&amp;quot;;
    let logArgs = [];
    buf.map(msg =&amp;gt; {
      logStr += &amp;quot;%s, %o\n&amp;quot;;
      logArgs.push(msg.str);
      logArgs.push(msg.args);
    });
    console.log(logStr, ...logArgs);
  }
  setTimeout(printBuffer, 1000); &#x2F;&#x2F; run every 1000ms
}

printBuffer(); &#x2F;&#x2F; &amp;lt;- start it
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;That should save you some performance complaints. I hope it helps :)&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Bootstrapping rain</title>
		<published>2017-08-08T00:00:00+00:00</published>
		<updated>2017-08-08T00:00:00+00:00</updated>
		<link href="https://hugodaniel.com/posts/bootstrapping-rain/" type="text/html"/>
		<id>https://hugodaniel.com/posts/bootstrapping-rain/</id>
		<content type="html">&lt;p&gt;It has passed a year and a couple of months since I started bootstrapping &amp;quot;a painting web app&amp;quot;. A lot has happened since that time, here is a quick TL;DR:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;I am still living off my savings (with a bit of help explained bellow)&lt;&#x2F;li&gt;
&lt;li&gt;Increase in frequency and amplitude of the emotional roller-coaster highs and lows&lt;&#x2F;li&gt;
&lt;li&gt;I started learning how to dance &lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=fbAbbodH7Dw&quot;&gt;kuduro&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=1VtDFi4m_PU&quot;&gt;kizomba and semba&lt;&#x2F;a&gt; to cope with 2&lt;&#x2F;li&gt;
&lt;li&gt;Had some unexpected expenses (teeth problems, car problems, general problems, problems problems, etc...)&lt;&#x2F;li&gt;
&lt;li&gt;Lots of noise&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;Noise that I now take a careful distant look at and collide for you in this blog post by applying three different filters into it.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;1-what-am-i-doing&quot;&gt;1. What am i doing ?&lt;&#x2F;h2&gt;
&lt;p&gt;Many signals exist in the noise, among these the strongest ones imply that I don&#x27;t have a clue about what I am doing. In life.&lt;&#x2F;p&gt;
&lt;p&gt;After all this time one of the hardest challenges I still have is explaining to a random person what the project is about. Come to think of it I haven&#x27;t even done it here, how could I avoid my personal blog ? that blog that I personaly chose to neglect. Wait no further, here it goes.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;&amp;quot;A painting web app&amp;quot;&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;This is a really reducing way of explaining what the project is about. Specificity wise I put it right after of &lt;em&gt;&amp;quot;It&#x27;s a programming project&amp;quot;&lt;&#x2F;em&gt;, or &lt;em&gt;&amp;quot;It&#x27;s a web page&amp;quot;&lt;&#x2F;em&gt;. It doesn&#x27;t say much more than these and whenever I use it people stare at me with that awkward face that blends simpathy with honest disapointment.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Here is how it happened&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Back in the day I grew tired of my (many) wrong choices in life. This was particularly hard for me since I have always been a lover of what is wrong and bad. &amp;quot;Wasting&amp;quot; huge ammounts of time doing code for no reason&#x2F;purpose at all is not good and certainly not right. Investing years trying to produce CG code worthy of any unknown demoparty and their attendees acids. Realizing that I am not a good coder and still betting my life on the craft. Travelling through deserts only to hope &lt;a href=&quot;http:&#x2F;&#x2F;www.dailymotion.com&#x2F;video&#x2F;x67s70&quot;&gt;nobody sees my attempts at hoping to intoxicate with colors&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;It is 5am.
Another cold winter morning in Lisbon enhanced by the summer optimized windows and walls of my 37m^2 home. The rain leaks through the windows and I move the small ikea table enough to protect the laptop from getting wet. I don&#x27;t know why I am forcing myself to wake up this early, perhaps knowing that the queue to heaven is shorter at this time of the day and that maybe god will allow my body and mind the grace of being numb for the rest of the working day.&lt;&#x2F;p&gt;
&lt;p&gt;I can see work blowing up somewhere later in the day, I can feel it devouring my brain. I need this time to breathe. The warm coffee smell keeps me awake, its scent rises above all the burn bruises my hands acquired in trying to make it half-awake. Maybe the blessing will rain down on me today.&lt;&#x2F;p&gt;
&lt;p&gt;I have been reading &lt;a href=&quot;http:&#x2F;&#x2F;www.redblobgames.com&#x2F;grids&#x2F;hexagons&#x2F;&quot;&gt;this article about hexagonal grids&lt;&#x2F;a&gt; for some time now. &lt;em&gt;Fuck! Why can&#x27;t I implement it right ? Why is programming so hard for me ?&lt;&#x2F;em&gt; I have been trying to do this for months now. I have no purpose in it besides avoiding the razors in my day.&lt;&#x2F;p&gt;
&lt;p&gt;Offset coordinates ? Cube coordinates ? &lt;a href=&quot;https:&#x2F;&#x2F;dribbble.com&#x2F;search?q=grid&quot;&gt;If I was a designer what would I do ? What would I need ?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Hmm....&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;dribbble.com&#x2F;shots&#x2F;1483510-Mystery-Project-50&quot;&gt;&lt;img src=&quot;&#x2F;images&#x2F;mystery_project.jpg&quot; alt=&quot;ZX Spectrum color palette&quot; &#x2F;&gt;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;It is 7am, my girlfriend will wake up at some point before 8. It is still dark outside, where did I leave the umbrella ? I go out to buy some hot bread to prepare our breakfast.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;2-holistic-approach&quot;&gt;2. Holistic approach&lt;&#x2F;h2&gt;
&lt;p&gt;Romance is a big part of bootstrapping.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;3-mentor&quot;&gt;3. Mentor&lt;&#x2F;h2&gt;
&lt;p&gt;In November 2016 the struggle to explain what the project is about led me to apply &lt;a href=&quot;https:&#x2F;&#x2F;www.iapmei.pt&#x2F;PRODUTOS-E-SERVICOS&#x2F;Empreendedorismo-Inovacao&#x2F;Empreendedorismo&#x2F;Startup-Voucher.aspx&quot;&gt;to a state sponsored funding&lt;&#x2F;a&gt;. In my mind I didn&#x27;t need the money since I was&#x2F;am living with low expenses on my savings, but they offered free access to a &amp;quot;portuguese mentorship network&amp;quot;. Mentorship that I knew that I could not afford and could not survive without. After answering their questions in a 22 page report I waited 5 months and got the response.&lt;&#x2F;p&gt;
&lt;p&gt;They liked the idea and decided to accept the project. I have been living the past 4 months with 690EUR&#x2F;month from them. This is enough to increase my life style, cover my expenses and still manage to save a bit each month.&lt;&#x2F;p&gt;
&lt;p&gt;The mentorship has been great. I was not expecting such a high quality work from the mentor that I chose from their huge list of available mentors.&lt;&#x2F;p&gt;
&lt;p&gt;I have since done the first prototype of the landing page for the graphic design web app &lt;a href=&quot;https:&#x2F;&#x2F;www.pixnit.com&quot;&gt;https:&#x2F;&#x2F;www.pixnit.com&lt;&#x2F;a&gt; and we have been focusing on applying this work on colors, grids and patterns on the ceramics industry (for a different, but related, product).&lt;&#x2F;p&gt;
&lt;p&gt;In september I will add a promotional video for the graphic design app and an open demo.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Palettes 0xF Fun</title>
		<published>2017-03-01T00:00:00+00:00</published>
		<updated>2017-03-01T00:00:00+00:00</updated>
		<link href="https://hugodaniel.com/posts/16-palettes-of-fun/" type="text/html"/>
		<id>https://hugodaniel.com/posts/16-palettes-of-fun/</id>
		<content type="html">&lt;ul&gt;
&lt;li&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Like most of the country in the 80&#x27;s, Alenquer, the village where I was born, was trying to modernize itself in what can be considered an insurgence against its rural past.&lt;&#x2F;p&gt;
&lt;p&gt;The context of coming out from a strong harsh dictatorship and having recently joined the european comunity automatically made everyone who did not work a lazy person. Opportunities were everywhere. In fact this was so intense for the newer generations that working was not enough for them to avoid the &amp;quot;lazy stigma&amp;quot;. You had to explore, experiment, live and enjoy the &amp;quot;new&amp;quot;.&lt;&#x2F;p&gt;
&lt;p&gt;I was 6 years old when my parents made their after dinner routine visit to a friends house with the usual purpose of drinking and talking about stuff that seemed to matter. What was supposed to be just another day in the company of friends changed my life forever.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;&amp;quot;I have finally bought the computer&amp;quot;&lt;&#x2F;strong&gt;
he said, on the corridor table there was a box with a screen and keys to press.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;&amp;quot;It&#x27;s a schneider&amp;quot;&lt;&#x2F;strong&gt;
He turned it on, typed some words on the keys and started a game. The first computer game I saw and got the chance to play.&lt;&#x2F;p&gt;
&lt;iframe width=&quot;280&quot; height=&quot;157&quot; src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;Q-y8dvsLYJM&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;&#x2F;iframe&gt;
&lt;p&gt;I had lots of questions in my mind after playing it:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;How is it made ?&lt;&#x2F;li&gt;
&lt;li&gt;How does it move as i press the buttons ?&lt;&#x2F;li&gt;
&lt;li&gt;How are those colors drawn ?&lt;&#x2F;li&gt;
&lt;li&gt;How can i do it ?&lt;&#x2F;li&gt;
&lt;li&gt;Where can i get more of it ?&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;the-world-is-dangerous&quot;&gt;The world is dangerous&lt;&#x2F;h2&gt;
&lt;p&gt;Slightly older kids were having a blast with the ZX spectrum.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;upload.wikimedia.org&#x2F;wikipedia&#x2F;commons&#x2F;3&#x2F;33&#x2F;ZXSpectrum48k.jpg&quot; alt=&quot;ZX Spectrum computer&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;It became quite famous in Portugal, companies were using it to ease some calculations, kids were pirating cassettes, and there were even local radio stations that used to broadcast entire games through the air (which you could then record in your cassette tape). Electronics done right.&lt;&#x2F;p&gt;
&lt;p&gt;The speccy sported an impressive 16 color palette (15 actually, the black is repeated).&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;speccy_palette.png&quot; alt=&quot;ZX Spectrum color palette&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Apparently limited, these colors provided no limits to the fertile imagination of teens armed with a programming manual (the ZX Spectrum was sold with &lt;a href=&quot;http:&#x2F;&#x2F;www.worldofspectrum.org&#x2F;ZXBasicManual&#x2F;&quot;&gt;a programming manual&lt;&#x2F;a&gt; included and no ammount of words can be used to explain the social impact this had).&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;paradise_cafe.png&quot; alt=&quot;Paradise Cafe - breaking portuguese cultural and legal concepts in the 80s&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Gravitating towards that tech and gaming oriented crowd made me later aware of a bunch of other computers that were also very important even though they were never famous here.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;size-doesn-t-matter&quot;&gt;Size doesn&#x27;t matter&lt;&#x2F;h2&gt;
&lt;p&gt;The Amstrad CPC was a direct competitor of the Spectrum, it also had a base of 16 colors but expanded them into 27 in a &amp;quot;high-resolution&amp;quot; mode.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;cpc_spectrum.png&quot; alt=&quot;Amstrad vs Spectrum&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;This was a clear upgrade in comparison to the 16-colors of Spectrum.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;strider.png&quot; alt=&quot;The game &amp;quot;Strider&amp;quot; in Spectrum(left) and in the Amstrad CPC(right)&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;In spite of having more colors this palette shies when put against the mother of all 8-bit computer 16 color palettes:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;C64-palette.png&quot; alt=&quot;The Commodore 64 color palette&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;These 16 colors alone allow for an amazing expression (if you are into it &lt;a href=&quot;http:&#x2F;&#x2F;unusedino.de&#x2F;ec64&#x2F;technical&#x2F;misc&#x2F;vic656x&#x2F;colors&#x2F;&quot;&gt;here is a detailed article&lt;&#x2F;a&gt; on how to reproduce them in RGB).&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;c64_cpc.png&quot; alt=&quot;C64 on the left, CPC on the right&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;A kind soul used both color palettes (C64 and Amstrad CPC) to &lt;a href=&quot;http:&#x2F;&#x2F;www.indieretronews.com&#x2F;2016&#x2F;02&#x2F;is-c64-palette-far-superior-to-amstrad.html&quot;&gt;produce a set of comparison images&lt;&#x2F;a&gt;, the C64 images are more natural and its grays are better distributed which in turn allows for slightly more complex shadows.&lt;&#x2F;p&gt;
&lt;p&gt;All these color palettes were made to be reproduced in TV screens from the 80&#x27;s. Some even take in consideration B&amp;amp;W TV&#x27;s as full 24bit RGB was still a few years away from commodity hardware.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;nowadays&quot;&gt;Nowadays&lt;&#x2F;h2&gt;
&lt;p&gt;Fast-forwarding for today, a &lt;a href=&quot;http:&#x2F;&#x2F;pixeljoint.com&#x2F;forum&#x2F;forum_posts.asp?TID=12795&quot;&gt;niche of people are still using 16 color palettes&lt;&#x2F;a&gt; and searching for possible combinations of colors that maximize expression. Most of these are related to &amp;quot;pixel art&amp;quot; communities and other minimalist art movements.&lt;&#x2F;p&gt;
&lt;p&gt;Truth is that there is a natural feeling in using colors in sets of 16 related elements. It gives you, the artist, a lot of paths to explore but not many enough to degrade the exploration experience into frustration.&lt;&#x2F;p&gt;
&lt;p&gt;As a final exercise I&#x27;ll leave three different loader screens for the same game. Try to see if you can guess which 8-bit computer is which.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;palette1.png&quot; alt=&quot;&quot; &#x2F;&gt;
&lt;img src=&quot;&#x2F;images&#x2F;palette2.png&quot; alt=&quot;&quot; &#x2F;&gt;
&lt;img src=&quot;&#x2F;images&#x2F;palette3.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>A new name to surf 2017</title>
		<published>2017-01-18T00:00:00+00:00</published>
		<updated>2017-01-18T00:00:00+00:00</updated>
		<link href="https://hugodaniel.com/posts/surfing-2017/" type="text/html"/>
		<id>https://hugodaniel.com/posts/surfing-2017/</id>
		<content type="html">&lt;p&gt;2016 was a year of change. I stopped working full-time as a programmer and decided to dedicate some of that time to personal projects. I made plans.
During the course of the year most of those plans got changed, a lot. My intention was to build &amp;quot;paint.pt&amp;quot;, a online painting tool, while supporting myself with some savings and with the money i could make by training people in programming skills.&lt;&#x2F;p&gt;
&lt;p&gt;I took teacher training and got a teacher certificate with the highest possible grade as i was full time on it.
Then got a few schools contacts that needed trainers for specific modules of some courses.&lt;&#x2F;p&gt;
&lt;p&gt;That was when I collided head-on with the portuguese reality of a fragile economy. I knew jobs were better here for programmers than for most other professions, so i was already somewhat mentally prepared to embrace a harsh reality.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;i-ll-pay-you-next-week&quot;&gt;&amp;quot;I&#x27;ll pay you next week&amp;quot;&lt;&#x2F;h2&gt;
&lt;p&gt;After a few courses money didn&#x27;t came. Excuses started to pile. It took a few months until the first bit of money appeared.&lt;&#x2F;p&gt;
&lt;p&gt;I ran to seek advice in a multitude of older, wiser people. What should i do ?&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;&amp;quot;Hugo all of this is normal, you have to understand that most companies are struggling economically.&amp;quot;&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;&amp;quot;In portugal companies are trying to stay above water.&amp;quot;&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;&amp;quot;Don&#x27;t expect to be paid before 6 months.&amp;quot;&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;I did try to extend my good will to parties that hire with the expectation of paying as late as possible.
The result of it was the realisation that ~10EUR&#x2F;hour isn&#x27;t enough for the time spent preparing the course, giving it and managing the debt until the employer decided to pay.&lt;&#x2F;p&gt;
&lt;p&gt;Time has come to scratch the initial plan and start fresh with a new strategy for 2017.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;change-of-name-change-of-plans&quot;&gt;Change of name, change of plans&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;&amp;quot;What are you working on ?&amp;quot;&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;&amp;quot;A painting application&amp;quot;&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;&amp;quot;Cool, whats it called ?&amp;quot;&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;&amp;quot;paint.pt as in paint point&amp;quot;&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;&amp;quot;That already exists&amp;quot;&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;A new name for the project was needed, and that is how Pixnit showed up. Pixnit a simple name that reads as &amp;quot;pixel knit&amp;quot; which is exactly what i want the tool to do.&lt;&#x2F;p&gt;
&lt;p&gt;I believe that people want to use custom shapes to create beautiful patterns and logos so that they can express themselves better and enhance current works, and that they will find value in it because trying to create logos, icons and patterns by using traditional software is hard and takes forever. &lt;&#x2F;p&gt;
&lt;p&gt;The domain was registered (pixnit.com) just in time for a complete change in strategy:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Take 1h each day to write in the blog;&lt;&#x2F;li&gt;
&lt;li&gt;Don&#x27;t work on anything else besides it and pixnit;&lt;&#x2F;li&gt;
&lt;li&gt;Push to release self contained small parts of pixnit as soon as possible;&lt;&#x2F;li&gt;
&lt;li&gt;Create a patreon;&lt;&#x2F;li&gt;
&lt;li&gt;Create a landing page;&lt;&#x2F;li&gt;
&lt;li&gt;Talk to people;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;Lets see where this goes. So no more trainings, no more certifications, no more noise. Just pixnit.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>How fast is nothing at all ?</title>
		<published>2016-09-23T00:00:00+00:00</published>
		<updated>2016-09-23T00:00:00+00:00</updated>
		<link href="https://hugodaniel.com/posts/how-fast-is-nothing/" type="text/html"/>
		<id>https://hugodaniel.com/posts/how-fast-is-nothing/</id>
		<content type="html">&lt;p&gt;One of the fastest functions that can be run inside &lt;a href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Web&#x2F;API&#x2F;window&#x2F;requestAnimationFrame&quot;&gt;requestAnimationFrame&lt;&#x2F;a&gt; goes something like this:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;
function fastest() {
  window.requestAnimationFrame(fastest);
}
window.requestAnimationFrame(fastest);

&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;A simple no-op. It does nothing besides requesting to be called in another frame in order to do nothing besides requesting to be called in another frame, and so on.
A request for nothing that hopefully matches the speed of your monitor v-sync to hastily do just nothing.&lt;&#x2F;p&gt;
&lt;p&gt;Which gives us the perfect chance to use the most important skill we have in our life.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;giving-meaning-to-nothing&quot;&gt;Giving meaning to nothing&lt;&#x2F;h2&gt;
&lt;p&gt;Measuring the function can be done by &lt;a href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Web&#x2F;API&#x2F;Performance&#x2F;mark&quot;&gt;placing marks&lt;&#x2F;a&gt; and then collecting them with the &lt;a href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Web&#x2F;API&#x2F;Performance&#x2F;measure&quot;&gt;performance.measure() function&lt;&#x2F;a&gt;. To avoid placing a mark every frame lets also count them and place it only once every 120 frames. My monitor updates at about 60Hz so this should place a mark every 2 seconds.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;let count = 0;
&#x2F;&#x2F; ^ count each frame
function fastest() {
  window.requestAnimationFrame(fastest);
  count += 1;
  if(count === 120) {
    performance.mark(&amp;quot;120&amp;quot;);
    &#x2F;&#x2F; ^ place a mark in the 120th
 }
}
performance.mark(&amp;quot;0&amp;quot;);
&#x2F;&#x2F; ^ place a mark before the first frame
window.requestAnimationFrame(fastest);
window.setTimeout(function() {
  &#x2F;&#x2F; measure the duration between those two marks;
  performance.measure(&amp;quot;120frames&amp;quot;, &amp;quot;0&amp;quot;, &amp;quot;120&amp;quot;);
  const measure = performance.getEntriesByType(&amp;quot;measure&amp;quot;)[0];
  console.log(&amp;quot;120 frames in: &amp;quot; + measure.duration);
}, 3000);

&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;At 60fps we get around 16.7ms per frame, 120 frames should run in ~2000ms. Yet after 3 seconds this code prints &amp;quot;120 frames in: 2148.415&amp;quot; in the console.
This is 8% slower, making it closer to 55fps (18.2ms) than to 60fps(16.7ms).&lt;&#x2F;p&gt;
&lt;p&gt;If you thrive in the eccentricities of speed then those 1.5ms are simply unacceptable, lets try to understand what is happening by opening the &amp;quot;Performance&amp;quot; tab in the developer tools.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-eyes-are-the-window-of-the-soul-and-all-i-see-is-garbage&quot;&gt;The eyes are the window of the soul. And all i see is garbage.&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;measure1.png&quot; alt=&quot;Screenshot of the performance monitor of Firefox developer tools, it shows a maximum of 60 frames-per-second, a minimum 5.41 frames-per-second, and an average of 55.85 frames-per-second.&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Those big drops in performance are related to the red dots of the Garbage Collector (from here on, just &amp;quot;GC&amp;quot;). They mark the time where GC woke up and run through the nursery of temporary objects to clean them.&lt;&#x2F;p&gt;
&lt;p&gt;These GC actions happen at the rate that the code fills the nursery heap with temporary objects. The browser then performs a small cleanup on the nursery heap and checks if some of those temporary objects can be promoted to the tenured heap.&lt;&#x2F;p&gt;
&lt;p&gt;The Tenured heap fills at a much lower rate than the Nursery and consequently the browser does not check it as often as the Nursery.&lt;&#x2F;p&gt;
&lt;p&gt;Lets try to promote all our short lived objects into something that might be selected to be tenured by the browser, thus reducing the time that the GC spends analyzing our running code and the nursery heap.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-execution-context-is-dead-long-live-the-execution-context&quot;&gt;The execution context is dead. Long live the execution context!&lt;&#x2F;h2&gt;
&lt;p&gt;My first approach is to remove the first invocation to the requestAnimationFrame() and place it inside a global closure in &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Immediately-invoked_function_expression&quot;&gt;IIFE&lt;&#x2F;a&gt; style.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;let count = 0;
(function() {
  function fastest() {
    window.requestAnimationFrame(fastest);
    count += 1;
    if(count === 120) {
      performance.mark(&amp;quot;120&amp;quot;);
    }
  }
  performance.mark(&amp;quot;0&amp;quot;);
  fastest();
  &#x2F;&#x2F; ^ call the function directly for the first frame
})();
&#x2F;&#x2F; ^ IIFE
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The idea here is to make the reference to the fastest() function explicitly last for the whole execution of the animation loop by wrapping it in a closure context that is immediatly called.&lt;&#x2F;p&gt;
&lt;p&gt;The next step is to remove all obvious objects allocations that happen inside our loop.
This means we need to remove all the strings (&amp;quot;120&amp;quot; is an object allocation) and all the numbers.&lt;&#x2F;p&gt;
&lt;p&gt;One of the great things about closures is that their execution context is available in their children, this means we can place the strings and numbers of our loop in vars in the long-lived closure context instead, making them live between our loop function calls.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(function () {
  let count = 0;
  const limit = 120;
  const lastMark = &amp;quot;120&amp;quot;;
  const firstMark = &amp;quot;0&amp;quot;;
  &#x2F;&#x2F; ^ all vars go here
  function fastest() {
    window.requestAnimationFrame(fastest);
    count += 1;
    if(count === limit) {
      performance.mark(lastMark);
    }
  }
  &#x2F;&#x2F; ^ when the fastest() context finishes there
  &#x2F;&#x2F; are no obvious object allocations to free
  performance.mark(firstMark);
  fastest();
})();
&#x2F;&#x2F; setTimeout remains the same, this is just for performance measure
window.setTimeout(function() {
  performance.measure(&amp;quot;120frames&amp;quot;, &amp;quot;0&amp;quot;, &amp;quot;120&amp;quot;);
  const totalTime = performance.getEntriesByType(&amp;quot;measure&amp;quot;)[0].duration;
  console.log(&amp;quot;120 frames in: &amp;quot; + totalTime);
}, 3000);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h2 id=&quot;a-speed-freak-nighmare-is-a-control-junkie-best-dream&quot;&gt;A speed-freak nighmare is a control-junkie best dream&lt;&#x2F;h2&gt;
&lt;p&gt;That code above produces the string &amp;quot;120 frames in: 1990.69&amp;quot;. This is great, it says that our measures were taken before the 16.7ms frame time has passed.&lt;&#x2F;p&gt;
&lt;p&gt;Lets look at the performance tab:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;measure2.png&quot; alt=&quot;Screenshot of the performance monitor of Firefox developer tools, it shows a maximum of 60 frames-per-second, a minimum 38.98 frames-per-second, and an average of 57.66 frames-per-second.&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Note that the Nursery is completely gone from our call-stack. There are still some red dots that mostly refer to the Cycle Collector (from here on, just &amp;quot;CC&amp;quot;) taking control of the code.&lt;&#x2F;p&gt;
&lt;p&gt;The CC does a simple job: it tracks cycles in the code.&lt;&#x2F;p&gt;
&lt;p&gt;A cycle happens when objects refer to each other in a way that their reference count never becomes zero. This can trick the GC to never collect them and forces the need to have a cycle counter running through the code once in a while.&lt;&#x2F;p&gt;
&lt;p&gt;The CC is a tricky beast, it does not allow anything else to run while it is running. Our JavaScript stops executing (you can validate this by increasing the zoom on the developer tools waterfall when a CC action occurs).&lt;&#x2F;p&gt;
&lt;p&gt;Fortunately this is not hurting the performance that much and each frame gets rendered bellow their time by the browser. I was starting to have some chills with the idea of having to frame limit the render loop to ensure a constant frame rate.&lt;&#x2F;p&gt;
&lt;p&gt;Thankfully this Intel HD3000 is still good for Nothing at all :)&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;intel.png&quot; alt=&quot;Screenshot of the chrome:&#x2F;&#x2F;gpu page list of problems. Currently chrome does not support WebGL in Intel HD3000 cards on OSX.&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Thanks &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;rqleve&quot;&gt;Raquel Foster&lt;&#x2F;a&gt; for reading this blog and motivating me to write this follow-up on &lt;a href=&quot;https:&#x2F;&#x2F;hugodaniel.com&#x2F;posts&#x2F;react-redux-canvas&#x2F;&quot;&gt;React-Redux-Canvas&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Bootstrapping - getting some boots to strap</title>
		<published>2016-08-11T00:00:00+00:00</published>
		<updated>2016-08-11T00:00:00+00:00</updated>
		<link href="https://hugodaniel.com/posts/bootstrapping4/" type="text/html"/>
		<id>https://hugodaniel.com/posts/bootstrapping4/</id>
		<content type="html">&lt;p&gt;A lot has happened since the last post on this series. Against all odds the portuguese football team won the Euro2016, their first international cup! Summer also hit us hard shortly after that, heavy migrations towards the south (algarve) and the &amp;quot;fire season&amp;quot; started, consuming the green portions of this rectangular land.&lt;&#x2F;p&gt;
&lt;p&gt;Amidst all of these events it became clear to me that i needed a backup plan in order to extend my window of development time for the paint.pt project.&lt;&#x2F;p&gt;
&lt;p&gt;So during the month of July i took a one month course in how to teach and give formation and got a &amp;quot;certification of pedagogical competences&amp;quot; (aka teaching certification). This was a great time, i learned a lot, practiced a lot and read a lot about teaching and group interactions.&lt;&#x2F;p&gt;
&lt;p&gt;Now i only need to start practicing it in a way that does not harm the time I have to work on paint.pt. Are you in need of some coding lessons ? :)&lt;&#x2F;p&gt;
&lt;h2 id=&quot;in-august&quot;&gt;In August&lt;&#x2F;h2&gt;
&lt;p&gt;August is a very special month in portuguese culture. Nothing happens in august. Everything stops and services work in half speed (which in most cases is a synonym to stop).&lt;&#x2F;p&gt;
&lt;p&gt;Not me, i&#x27;m not a big fan of crowded beaches and hope to take the time to restart coding on paint.pt (that almost stopped during july).&lt;&#x2F;p&gt;
&lt;p&gt;For this month of August my plan is to finish the menu system and start painting :D. I already finished the &lt;a href=&quot;http:&#x2F;&#x2F;www.paint.pt&quot;&gt;logo and loading animation&lt;&#x2F;a&gt;. So stay tuned.&lt;&#x2F;p&gt;
&lt;p&gt;If you enjoy reading this please consider subscribing with your e-mail so we can stay in contact.&lt;&#x2F;p&gt;
&lt;p&gt;Check out the other &amp;quot;bootstrapping&amp;quot; posts: &lt;a href=&quot;https:&#x2F;&#x2F;hugodaniel.com&#x2F;posts&#x2F;bootstrapping1&#x2F;&quot;&gt;Bootstrapping 1&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;hugodaniel.com&#x2F;posts&#x2F;bootstrapping2&#x2F;&quot;&gt;Bootstrapping 2&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;hugodaniel.com&#x2F;posts&#x2F;bootstrapping3&#x2F;&quot;&gt;Bootstrapping 3&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Bootstrapping - week 3</title>
		<published>2016-06-24T00:00:00+00:00</published>
		<updated>2016-06-24T00:00:00+00:00</updated>
		<link href="https://hugodaniel.com/posts/bootstrapping3/" type="text/html"/>
		<id>https://hugodaniel.com/posts/bootstrapping3/</id>
		<content type="html">&lt;p&gt;This week was a blast! I took 3 days off and only worked thursday and friday.&lt;&#x2F;p&gt;
&lt;p&gt;This wasn&#x27;t entirely on purpose, my intention was not to have real &amp;quot;vacations&amp;quot;, but to enjoy the overall Lisbon party mood. Tuesday was also the first game of the portuguese football team in euro 2016.&lt;&#x2F;p&gt;
&lt;p&gt;Though i am not a football fan, i do like to watch the portuguese team play with the eventuality of seeing some magical moves by Cristiano Ronaldo.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;ronaldo.jpg&quot; alt=&quot;Cristiano Ronaldo 2012&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;I know by experience that everything stops here in portugal when a big football match is going to happen. This is a strong motivator to go out drink some beers with friends in antecipation for the game.&lt;&#x2F;p&gt;
&lt;p&gt;It is important to note that a win by the home team is one of the best excuses to party hard. Unfortunately we did not win, it was a tie with Iceland, which meant no after party as a huge victory was expected.&lt;&#x2F;p&gt;
&lt;p&gt;Still it is better to enjoy the day than to stress with &amp;quot;having something to do&amp;quot;. Let the work be done on more appropriate days.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;3rd-week&quot;&gt;3rd Week&lt;&#x2F;h2&gt;
&lt;p&gt;The two remaining work days i wrote the &lt;a href=&quot;https:&#x2F;&#x2F;hugodaniel.com&#x2F;posts&#x2F;react-redux-canvas&#x2F;&quot;&gt;introductory post&lt;&#x2F;a&gt; on &amp;quot;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;HugoDaniel&#x2F;redux-canvas&quot;&gt;redux-canvas&lt;&#x2F;a&gt; and release it on npm together with a simple usage example.&lt;&#x2F;p&gt;
&lt;p&gt;This is going to be the basis of the paint application as it allows canvas (which is crippled with side-effects) to be used directly in pure redux actions.&lt;&#x2F;p&gt;
&lt;p&gt;And it was it. If you enjoy reading this please consider subscribing with your e-mail so we can stay in contact (i will personally send you an e-mail).&lt;&#x2F;p&gt;
&lt;p&gt;Check out the other &amp;quot;bootstrapping&amp;quot; posts: &lt;a href=&quot;https:&#x2F;&#x2F;hugodaniel.com&#x2F;posts&#x2F;bootstrapping1&#x2F;&quot;&gt;Bootstrapping 1&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;hugodaniel.com&#x2F;posts&#x2F;bootstrapping2&#x2F;&quot;&gt;Bootstrapping 2&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;hugodaniel.com&#x2F;posts&#x2F;bootstrapping4&#x2F;&quot;&gt;Bootstrapping 4&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>React - Redux - Canvas</title>
		<published>2016-06-17T00:00:00+00:00</published>
		<updated>2016-06-17T00:00:00+00:00</updated>
		<link href="https://hugodaniel.com/posts/react-redux-canvas/" type="text/html"/>
		<id>https://hugodaniel.com/posts/react-redux-canvas/</id>
		<content type="html">&lt;p&gt;Painting stuff on a &lt;code&gt;&amp;lt;canvas&amp;gt;&lt;&#x2F;code&gt; is easy, call &lt;a href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Web&#x2F;API&#x2F;HTMLCanvasElement&#x2F;getContext&quot;&gt;HTMLCanvasElement.getContext()&lt;&#x2F;a&gt; to get the &lt;a href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Web&#x2F;API&#x2F;CanvasRenderingContext2D&quot;&gt;CanvasRenderingContext&lt;&#x2F;a&gt; and then use its functions to express yourself.&lt;&#x2F;p&gt;
&lt;p&gt;Doing an animation is also easy, call &lt;a href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Web&#x2F;API&#x2F;window&#x2F;requestAnimationFrame&quot;&gt;window.requestAnimationFrame()&lt;&#x2F;a&gt; to tell the browser that you want to do an animation, and on it use the &lt;a href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Web&#x2F;API&#x2F;CanvasRenderingContext2D&quot;&gt;CanvasRenderingContext&lt;&#x2F;a&gt; to animate as you see fit (tipically clearing the part of the drawing that changed and painting the new version of it).&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;var canvasElem = document.getElementById(&amp;quot;canvas&amp;quot;);
var w = window.innerWidth;
var h = window.innerHeight;
var rectSize = 256;
&#x2F;&#x2F; set the canvas size
canvasElem.setAttribute(&amp;quot;width&amp;quot;, w);
canvasElem.setAttribute(&amp;quot;height&amp;quot;, h);
&#x2F;&#x2F; get the context
var ctx = canvasElem.getContext(&amp;quot;2d&amp;quot;);
&#x2F;&#x2F; the animation loop
function animation(t) {
  window.requestAnimationFrame(animation);
  var time = t*0.001;
  var cost = (Math.cos(time) + 1) &#x2F; 2;
  var sint = (Math.sin(time) + 1) &#x2F; 2;
  var rc = rectSize*cost;
  var rs = rectSize*sint;
  var color = `rgb(${Math.round(cost*255)},
               ${Math.round(sint*255)},
               255)`;
  ctx.fillStyle = color;
  &#x2F;&#x2F; a simple rectangle
  ctx.fillRect(rc, rs, rc, rs);
  };
window.requestAnimationFrame(animation);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h2 id=&quot;then-came-react&quot;&gt;Then came React&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;facebook.github.io&#x2F;react&#x2F;&quot;&gt;React&lt;&#x2F;a&gt; lets us use composable components of code and html elements to do our web apps of the future. To keep things running nicely it defines a common lifecycle for each component. The most simple version of it is that it &amp;quot;mounts&amp;quot; the component on the renderer and updates it when input changes.&lt;&#x2F;p&gt;
&lt;p&gt;The most used React DOM renderer is their official &lt;a href=&quot;https:&#x2F;&#x2F;www.npmjs.com&#x2F;package&#x2F;react-dom&quot;&gt;&amp;quot;react-dom&amp;quot;&lt;&#x2F;a&gt;, it uses minimal stateless virtual DOM elements (called ReactElements) for your components and pushes them to the real DOM when appropriate.&lt;&#x2F;p&gt;
&lt;p&gt;A common approach of using only &lt;a href=&quot;https:&#x2F;&#x2F;facebook.github.io&#x2F;react&#x2F;&quot;&gt;React&lt;&#x2F;a&gt; to paint on a &lt;code&gt;&amp;lt;canvas&amp;gt;&lt;&#x2F;code&gt; is to render the element and fetch the context when it is mounted. Here is an example of a basic canvas component:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;export default class Canvas extends Component {
  componentDidMount() {
    let canvas = findDOMNode(this.refs.canvas),
        ctx = canvas.getContext(&amp;quot;2d&amp;quot;);
    this.props.onContext(ctx);
  }
  render() {
    const { width, height } = this.props;
    const canvasCx = `Canvas ${this.props.className}`;
    return (
      &amp;lt;canvas className={canvasCx} ref=&amp;quot;canvas&amp;quot;
              width={width + &amp;quot;px&amp;quot;} height={height + &amp;quot;px&amp;quot;}
              style={ { display: &amp;quot;block&amp;quot; } }
      &#x2F;&amp;gt;
    );
  };
}
Canvas.propTypes =
  { width:     PropTypes.number.isRequired
  , height:    PropTypes.number.isRequired
  , onContext: PropTypes.func.isRequired
  };
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;To increase reusability the context is passed to the parent component where it can be used by its developer sprawling moisture of creative juices.&lt;&#x2F;p&gt;
&lt;p&gt;Here is an example of a component that draws a simple grid using the Canvas component defined above.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;import React, { Component, PropTypes } from &amp;quot;react&amp;quot;;
import { findDOMNode }                 from &amp;quot;react-dom&amp;quot;;
import Canvas                          from &amp;quot;.&#x2F;Canvas.jsx&amp;quot;;

export default class GridCanvas extends Component {
  constructor(props, context) {
    super(props, context);
    this.state = { ctx: null }
  };
  _renderGrid() {
    const { color, lineWidth, squareSize
          , offsetX, offsetY
          , width, height
          } = this.props;
    const { ctx } = this.state;
    &#x2F;&#x2F; adjust for vertical screens:
    const limit = Math.max(width, height);
    ctx.beginPath();
    ctx.moveTo(0, 0);
    &#x2F;&#x2F; draw the horizontal lines
    for( let y = offsetY % squareSize; y &amp;lt; limit; y += squareSize) {
      ctx.moveTo(0, y);
      ctx.lineTo(width, y);
    }
    &#x2F;&#x2F; draw the vertical lines
    for( var x = offsetX % squareSize; x &amp;lt; limit; x += squareSize) {
      ctx.moveTo(x, 0);
      ctx.lineTo(x, height);
    }
    ctx.lineWidth = lineWidth;
    ctx.strokeStyle = color;
    ctx.stroke();
    ctx.closePath();
  }
  render() {
    const { width, height, cursor, color } = this.props;
    const { ctx } = this.state;
    if( ctx ) {
      &#x2F;&#x2F; canvas render commands go here
      ctx.clearRect(0, 0, width, height);
      this._renderGrid();
    }
    return (
      &amp;lt;Canvas className={ `GridCanvas ${this.props.className}` }
              width={width} height={height}
              onContext={ ctx =&amp;gt; this.setState( { ctx } ) }
      &#x2F;&amp;gt;
    );
  };
}
GridCanvas.propTypes =
  { color:      PropTypes.string
  &#x2F;&#x2F; ^ color for the stroke of the outline of the grid
  , lineWidth:  PropTypes.number
  &#x2F;&#x2F; ^ the width, in pixels, for the grid line
  , offsetX:    PropTypes.number
  , offsetY:    PropTypes.number
  , cursor:     PropTypes.string
  &#x2F;&#x2F; ^ the mouse cursor to use when mouse is over the grid
  , squareSize: PropTypes.number
  , width:      PropTypes.number.isRequired
  , height:     PropTypes.number.isRequired
  };
GridCanvas.defaultProps =
  { cursor: &amp;quot;default&amp;quot;
  };
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;a href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Web&#x2F;API&#x2F;CanvasRenderingContext2D&quot;&gt;CanvasRenderingContext&lt;&#x2F;a&gt; is kept in the state and then used in render() to clear and draw the shapes. This way the code is run in sync with the &lt;a href=&quot;https:&#x2F;&#x2F;facebook.github.io&#x2F;react&#x2F;docs&#x2F;component-specs.html&quot;&gt;React DOM flow&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;This works very well if you intend to draw single frame art, however since it is coping with &lt;a href=&quot;https:&#x2F;&#x2F;facebook.github.io&#x2F;react&#x2F;docs&#x2F;component-specs.html&quot;&gt;React lifecycle flow&lt;&#x2F;a&gt; it might not be the best approach if you intend to have 60fps animations because the &lt;a href=&quot;https:&#x2F;&#x2F;facebook.github.io&#x2F;react&#x2F;index.html&quot;&gt;React&lt;&#x2F;a&gt; logic will be running alongside your context drawing code in those precious 16ms of the frame.&lt;&#x2F;p&gt;
&lt;p&gt;You can try to optimize your &lt;a href=&quot;https:&#x2F;&#x2F;facebook.github.io&#x2F;react&#x2F;index.html&quot;&gt;React&lt;&#x2F;a&gt; UI with &lt;a href=&quot;https:&#x2F;&#x2F;facebook.github.io&#x2F;react&#x2F;docs&#x2F;component-specs.html#updating-shouldcomponentupdate&quot;&gt;shouldComponentUpdate&lt;&#x2F;a&gt; and you should. But it is still going to contend when your UI hasn&#x27;t changed and all you want to do is to update the &lt;code&gt;&amp;lt;canvas&amp;gt;&lt;&#x2F;code&gt; with a master piece of an animation.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;react-but-only-partially&quot;&gt;React, but only partially&lt;&#x2F;h2&gt;
&lt;p&gt;Luckily &lt;a href=&quot;https:&#x2F;&#x2F;facebook.github.io&#x2F;react&#x2F;index.html&quot;&gt;React&lt;&#x2F;a&gt; is not intrusive and &lt;a href=&quot;https:&#x2F;&#x2F;www.npmjs.com&#x2F;package&#x2F;react-dom&quot;&gt;&amp;quot;react-dom&amp;quot;&lt;&#x2F;a&gt; is intended to be used along standard HTML&#x2F;JS code. This allows developers to only use &lt;a href=&quot;https:&#x2F;&#x2F;facebook.github.io&#x2F;react&#x2F;index.html&quot;&gt;React&lt;&#x2F;a&gt; on certain parts of their website, the aspiring artist can then use it for most of the parts of the app and keep the &lt;code&gt;&amp;lt;canvas&amp;gt;&lt;&#x2F;code&gt; outside of its logic.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;lt;!doctype html&amp;gt;
&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;html&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;gt;
  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;head&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;gt; &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;title&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;gt;React and Canvas&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;title&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;gt; &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;head&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;gt;
  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;body&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;gt;
    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;react-root&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;&amp;gt;
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&amp;lt;!-- react goes here --&amp;gt;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;gt;
    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;canvas &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;animation&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;&amp;gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;canvas&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&#x2F;&amp;gt;
    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;script &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;src&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;https:&#x2F;&#x2F;fb.me&#x2F;react-15.0.1.js&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;&amp;gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;script&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;gt;
    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;script &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;src&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;https:&#x2F;&#x2F;fb.me&#x2F;react-dom-15.0.1.js&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;&amp;gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;script&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;gt;
    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;script&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;gt;
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;animNode &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= document.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getElementById&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;animation&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;);
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ctx &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;animNode&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getContext&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;2d&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;);
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;loop&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(t) {
        window.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;requestAnimationFrame&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;loop&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;);
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; draw something on the canvas
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;}
      window.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;requestAnimationFrame&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;loop&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;);
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; React renders on the &amp;quot;react-root&amp;quot; node
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;ReactDOM&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;render&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;MyApp &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&#x2F;&amp;gt;, document.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getElementById&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;react-root&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;));
    &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;script&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;gt;
  &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;body&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;gt;
&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;html&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;All is good if you don&#x27;t intend to make the &lt;code&gt;&amp;lt;canvas&amp;gt;&lt;&#x2F;code&gt; high-speed animation interact with the &lt;a href=&quot;https:&#x2F;&#x2F;facebook.github.io&#x2F;react&#x2F;index.html&quot;&gt;React&lt;&#x2F;a&gt; part of the code.&lt;&#x2F;p&gt;
&lt;p&gt;If you want to communicate between the &lt;code&gt;&amp;lt;canvas&amp;gt;&lt;&#x2F;code&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;facebook.github.io&#x2F;react&#x2F;index.html&quot;&gt;React&lt;&#x2F;a&gt; then you will have to adopt some interaction strategy (e.g. passing a callback as a prop; using plain JS events; etc...).&lt;&#x2F;p&gt;
&lt;p&gt;However if you have been through the trenches, your battle proven developer experience is probably telling you that this is an optimization trade-off that will quickly grow into a pessimization.&lt;&#x2F;p&gt;
&lt;p&gt;State will most likely start to accumulate outside and inside of both parts as communication starts becoming more intricate and managing it will give you with many scars to heal.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;redux-will-make-good-for-all-our-sins&quot;&gt;Redux will make good for all our sins&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;redux.js.org&#x2F;&quot;&gt;Redux&lt;&#x2F;a&gt; defines a unidirectional flow of data on your application. It uses a single store to hold the application state and allows it to be updated by a pure function that computes the next state based on the actions dispatched by the app. They call the pure function a &amp;quot;reducer&amp;quot; and you can have as many of them in your app as you want.&lt;&#x2F;p&gt;
&lt;p&gt;This is within the spirit of pure components: something that always produces the same output if fed with the same input. When used with &lt;a href=&quot;https:&#x2F;&#x2F;facebook.github.io&#x2F;react&#x2F;index.html&quot;&gt;React&lt;&#x2F;a&gt; it opens the door to simpler optimized components with predictable state.&lt;&#x2F;p&gt;
&lt;p&gt;Unfortunately the &lt;a href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Web&#x2F;API&#x2F;CanvasRenderingContext2D&quot;&gt;CanvasRenderingContext&lt;&#x2F;a&gt; is not pure, its functions rely on a bunch of inner state that can change outside of their scope. This makes it hard to master and to manage (on the other side it has sprawled a counteless number of JS libs to work with it).&lt;&#x2F;p&gt;
&lt;p&gt;It also makes it difficult to integrate with &lt;a href=&quot;http:&#x2F;&#x2F;redux.js.org&#x2F;&quot;&gt;Redux&lt;&#x2F;a&gt; which by design expects pure actions and state. It is useless to keep the &lt;a href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Web&#x2F;API&#x2F;CanvasRenderingContext2D&quot;&gt;CanvasRenderingContext&lt;&#x2F;a&gt; in the store and update it with a reducer because its drawing functions will change it outside the pure flow of &lt;a href=&quot;http:&#x2F;&#x2F;redux.js.org&#x2F;&quot;&gt;Redux&lt;&#x2F;a&gt; actions.&lt;&#x2F;p&gt;
&lt;p&gt;To make things a bit worse, high-performance canvas applications &lt;a href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Web&#x2F;API&#x2F;Canvas_API&#x2F;Tutorial&#x2F;Optimizing_canvas&quot;&gt;are encouraged&lt;&#x2F;a&gt; to follow a set of destructive&#x2F;impure practices which are hard to follow if using React&#x2F;Redux.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;introducing-redux-canvas&quot;&gt;Introducing &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;HugoDaniel&#x2F;redux-canvas&quot;&gt;redux-canvas&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;What if along with the &lt;a href=&quot;http:&#x2F;&#x2F;redux.js.org&#x2F;&quot;&gt;Redux&lt;&#x2F;a&gt; actions that update an app pure state we could issue painting actions to be performed in the impure canvas context ?&lt;&#x2F;p&gt;
&lt;p&gt;This is what &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;HugoDaniel&#x2F;redux-canvas&quot;&gt;redux-canvas&lt;&#x2F;a&gt; is meant to do. It allows you to keep your UI running purely with well defined components and their respective lifecycles, while giving you a shortcut to call functions on registered canvas contexts.&lt;&#x2F;p&gt;
&lt;p&gt;It is a &lt;a href=&quot;http:&#x2F;&#x2F;redux.js.org&#x2F;&quot;&gt;Redux&lt;&#x2F;a&gt; middleware that works by keeping a &lt;a href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Web&#x2F;JavaScript&#x2F;Reference&#x2F;Global_Objects&#x2F;Map&quot;&gt;Map()&lt;&#x2F;a&gt; of &lt;a href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Web&#x2F;API&#x2F;CanvasRenderingContext2D&quot;&gt;CanvasRenderingContext&lt;&#x2F;a&gt;&#x27;s that persist between redux actions, and then it passes the Map() to the functions you specify when dispatching the action.
These functions are called within a requestAnimationFrame().&lt;&#x2F;p&gt;
&lt;p&gt;This way your impure code will be playing together with the pure code without messing with it. You can keep your UI pure while playing with canvas as you see fit (perhaps even trying to keep it pure as well).&lt;&#x2F;p&gt;
&lt;p&gt;In the next post I will write some usage examples with animations and also create a few helper functions to ease the usage of &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;HugoDaniel&#x2F;redux-canvas&quot;&gt;redux-canvas&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Meanwhile checkout my take on &lt;a href=&quot;https:&#x2F;&#x2F;hugodaniel.com&#x2F;posts&#x2F;mastering-console-log&#x2F;&quot;&gt;console.log()&lt;&#x2F;a&gt;, a quick look into &lt;a href=&quot;https:&#x2F;&#x2F;hugodaniel.com&#x2F;posts&#x2F;in-loving-memory-of-immutable&#x2F;&quot;&gt;ImmutableJS&lt;&#x2F;a&gt; and my performance measurements on &lt;a href=&quot;https:&#x2F;&#x2F;hugodaniel.com&#x2F;posts&#x2F;how-useful-is-the-javascript-set&#x2F;&quot;&gt;JavaScript Set&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Bootstrapping - week 2</title>
		<published>2016-06-16T00:00:00+00:00</published>
		<updated>2016-06-16T00:00:00+00:00</updated>
		<link href="https://hugodaniel.com/posts/bootstrapping2/" type="text/html"/>
		<id>https://hugodaniel.com/posts/bootstrapping2/</id>
		<content type="html">&lt;p&gt;Lisbon is in party, this year the anual city holiday is happening in sync with a national holiday.&lt;&#x2F;p&gt;
&lt;p&gt;This means the common Lisbon worker will get 4 days of paid holiday for free :)&lt;&#x2F;p&gt;
&lt;p&gt;The Lisbon party actually lasts for 2 whole weeks, where you can dance and sing a blend of new-age cheesy pop music. Most of the fun happens during the night.&lt;&#x2F;p&gt;
&lt;p&gt;In order to carry 3 extra days of holidays for the next week (this way i would be able to recover from sunday night) i decided to work for 7 days on my 2nd week (through the weekend).&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;sardinha.jpg&quot; alt=&quot;Lisbon party sardine 2016&quot; title=&quot;Uma sardinha das que se comem com os olhos&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;2nd-week&quot;&gt;2nd Week&lt;&#x2F;h2&gt;
&lt;p&gt;In the beginning of the week i opened a &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;paintpoint&#x2F;paintpt&#x2F;issues&#x2F;2&quot;&gt;ticket&lt;&#x2F;a&gt; to render a simple square grid on the canvas. This was supposed to be a simple task but it took me a bit to complete.&lt;&#x2F;p&gt;
&lt;p&gt;What would be a good way to render to canvas using react&#x2F;redux ?&lt;&#x2F;p&gt;
&lt;p&gt;What would be a good data type for the paint app ?&lt;&#x2F;p&gt;
&lt;p&gt;How would it interact with the canvas and the react&#x2F;redux logic ?&lt;&#x2F;p&gt;
&lt;p&gt;These questions made me start a new sub-project that i named &amp;quot;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;HugoDaniel&#x2F;redux-canvas&quot;&gt;redux-canvas&lt;&#x2F;a&gt;&amp;quot;. It is yet another way to draw on the canvas using react&#x2F;redux.&lt;&#x2F;p&gt;
&lt;p&gt;By the end of the week (sunday, 12) i did not yet had it finished or published, but stay tuned (subscribe please) because a more thorough blog post about all of this is on the way.&lt;&#x2F;p&gt;
&lt;p&gt;Don&#x27;t forget to subscribe and checkout the other &amp;quot;bootstrapping&amp;quot; posts: &lt;a href=&quot;https:&#x2F;&#x2F;hugodaniel.com&#x2F;posts&#x2F;bootstrapping1&#x2F;&quot;&gt;Bootstrapping 1&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;hugodaniel.com&#x2F;posts&#x2F;bootstrapping3&#x2F;&quot;&gt;Boostrapping 3&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;hugodaniel.com&#x2F;posts&#x2F;bootstrapping4&#x2F;&quot;&gt;Bootstrapping 4&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Bootstrapping - week 1</title>
		<published>2016-06-06T00:00:00+00:00</published>
		<updated>2016-06-06T00:00:00+00:00</updated>
		<link href="https://hugodaniel.com/posts/bootstrapping1/" type="text/html"/>
		<id>https://hugodaniel.com/posts/bootstrapping1/</id>
		<content type="html">&lt;p&gt;Two months have passed since i quit my job with the plan of taking some time to develop a few ideas that have outgrown me enough to earn the respect of a full-time dedication.&lt;&#x2F;p&gt;
&lt;p&gt;This &amp;quot;Bootstrapping&amp;quot; post is the first in a series of posts about a quest to a sustainable monthly income.&lt;&#x2F;p&gt;
&lt;p&gt;To start i am going to do a painting web application. A simple web app to paint points in a canvas. I call it &amp;quot;paint.pt&amp;quot;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;1st-week&quot;&gt;1st Week&lt;&#x2F;h2&gt;
&lt;p&gt;The week went about fine, in the first days i learned a bit more about JavaScript in order to understand if a framework would be necessary for paint.pt.&lt;&#x2F;p&gt;
&lt;p&gt;After some thinking, a bit of research and some rough implementations of what i thought would be the corner cases of it, i decided to pass the oportunity to use pure JavaScript and use react instead.&lt;&#x2F;p&gt;
&lt;p&gt;By the time of this writing i am living in the year 2016. That means the rest of the week was spent configuring a react&#x2F;redux&#x2F;immutable&#x2F;webpack&#x2F;mocha&#x2F;selenium&#x2F;babel&#x2F;flow&#x2F;eslint boilerplate repository for it.&lt;&#x2F;p&gt;
&lt;p&gt;By the end of the week i realized that the sun was shining outside and so i went for a walk in Lisbon to read a few chapters of the git book.&lt;&#x2F;p&gt;
&lt;p&gt;That was it.&lt;&#x2F;p&gt;
&lt;p&gt;Check out the other &amp;quot;bootstrapping&amp;quot; posts: &lt;a href=&quot;https:&#x2F;&#x2F;hugodaniel.com&#x2F;posts&#x2F;bootstrapping2&#x2F;&quot;&gt;Bootstrapping 2&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;hugodaniel.com&#x2F;posts&#x2F;bootstrapping3&#x2F;&quot;&gt;Bootstrapping 3&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;hugodaniel.com&#x2F;posts&#x2F;bootstrapping4&#x2F;&quot;&gt;Bootstrapping 4&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>about me</title>
		<published>2016-04-09T00:00:00+00:00</published>
		<updated>2016-04-09T00:00:00+00:00</updated>
		<link href="https://hugodaniel.com/posts/about/" type="text/html"/>
		<id>https://hugodaniel.com/posts/about/</id>
		<content type="html">&lt;p&gt;Hi, I am Hugo, from the ancient end of the world.&lt;&#x2F;p&gt;
&lt;p&gt;Nowdays it is still the end of the world but everybody just calls it Portugal.&lt;&#x2F;p&gt;
&lt;p&gt;I was born in Alenquer, a village near Lisbon.&lt;&#x2F;p&gt;
&lt;p&gt;I love poetry and most likely this blog will turn to be a poetry blog about my ramblings.&lt;&#x2F;p&gt;
&lt;p&gt;I also like photography and I tend to avoid the fact that I am a terrible photographer.&lt;&#x2F;p&gt;
&lt;p&gt;But unfortunately I spend all my days programming, something that I love and hate at the same time.&lt;&#x2F;p&gt;
&lt;img class=&quot;image&quot; src=&quot;&#x2F;images&#x2F;alenquer.jpg&quot; alt=&quot;Imagem de alenquer a preto e branco&quot; &#x2F;&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;cenasdohugo.blogspot.com&quot;&gt;poesia&lt;&#x2F;a&gt;
&lt;a href=&quot;https:&#x2F;&#x2F;www.github.com&#x2F;HugoDaniel&quot;&gt;github&lt;&#x2F;a&gt;
&lt;a href=&quot;https:&#x2F;&#x2F;www.twitter.com&#x2F;mr_hugo&quot;&gt;twitter&lt;&#x2F;a&gt;
&lt;a href=&quot;http:&#x2F;&#x2F;www.hugodaniel.pt&#x2F;atom.xml&quot;&gt;rss&lt;&#x2F;a&gt;
e-mail: mail [[at]] hugodaniel.pt&lt;&#x2F;p&gt;
</content>
	</entry>
</feed>
